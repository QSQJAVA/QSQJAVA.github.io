<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[算法分析]]></title>
      <url>/2021/11/29/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="一、算法分析"><a href="#一、算法分析" class="headerlink" title="一、算法分析"></a><strong>一、算法分析</strong></h1><p>前面我们已经介绍了，研究算法的最终目的就是如何花更少的时间，如何占用更少的内存去完成相同的需求，并且也通过案例演示了不同算法之间时间耗费和空间耗费上的差异，但我们并不能将时间占用和空间占用量化，因此，接下来我们要学习有关算法时间耗费和算法空间耗费的描述和分析。有关算法时间耗费分析，我们称之为算法的**<u>时间复杂度分析</u><strong>，有关算法的空间耗费分析，我们称之为算法的</strong><u>空间复杂度分析</u>**。</p>
<span id="more"></span>

<h2 id="1-1-算法的时间复杂度分析"><a href="#1-1-算法的时间复杂度分析" class="headerlink" title="1.1 算法的时间复杂度分析"></a><strong>1.1</strong> 算法的时间复杂度分析</h2><p>我们要计算算法时间耗费情况，首先我们得度量算法的执行时间，那么如何度量呢？</p>
<p>事后分析估算方法：</p>
<p>比较容易想到的方法就是我们把算法执行若干次，然后拿个计时器在旁边计时，这种事后统计的方法看上去的确不错，并且也并非要我们真的拿个计算器在旁边计算，因为计算机都提供了计时的功能。这种统计方法主要是通过设计好的测试程序和测试数据，利用计算机计时器对不同的算法编制的程序的运行时间进行比较，从而确定算法效率的高低，但是这种方法有很大的缺陷：必须依据算法实现编制好的测试程序，通常要花费大量时间和精力，测试完了如果发现测试的是非常糟糕的算法，那么之前所做的事情就全部白费了，并且不同的测试环境(硬件环境)的差别导致测试的结果差异也很大。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis(); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </span><br><span class="line">        sum += i; </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum); </span><br><span class="line">    S</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis(); </span><br><span class="line">    System.out.println(end-start); &#125;</span><br></pre></td></tr></table></figure>

<p> 事前分析估算方法：</p>
<p>在计算机程序编写前，依据统计方法对算法进行估算，经过总结，我们发现一个高级语言编写的程序程序在计算机</p>
<p>上运行所消耗的时间取决于下列因素：</p>
<p> 1.算法采用的策略和方案；</p>
<p> 2.编译产生的代码质量；</p>
<p> 3.问题的输入规模(所谓的问题输入规模就是输入量的多少)；</p>
<p> 4.机器执行指令的速度；</p>
<p>由此可见，抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间依赖于算法的好坏和问题的输入规模。如果算法固定，那么该算法的执行时间就只和问题的输入规模有关系了。</p>
<p>我么再次以之前的求和案例为例，进行分析。</p>
<p><strong>需求：</strong></p>
<p>计算1到100的和。</p>
<p>第一种解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如果输入量为n为<span class="number">1</span>，则需要计算<span class="number">1</span>次； </span><br><span class="line">如果输入量n为<span class="number">1</span>亿，则需要计算<span class="number">1</span>亿次； </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">//执行了n+1次 </span></span><br><span class="line">        sum += i;</span><br><span class="line">        <span class="comment">//执行了n次 </span></span><br><span class="line">    &#125;System.out.println(<span class="string">&quot;sum=&quot;</span> + sum); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果输入量为n为<span class="number">1</span>，则需要计算<span class="number">1</span>次； 如果输入量n为<span class="number">1</span>亿，则需要计算<span class="number">1</span>次； </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    sum = (n+<span class="number">1</span>)*n/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//执行1次 </span></span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，当输入规模为n时，第一种算法执行了1+1+(n+1)+n=2n+3次；第二种算法执行了1+1+1=3次。如果我们把第一种算法的循环体看做是一个整体，忽略结束条件的判断，那么其实这两个算法运行时间的差距就是n和1的差距。</p>
<p>为什么循环判断在算法1里执行了n+1次，看起来是个不小的数量，但是却可以忽略呢？我们来看下一个例子：</p>
<p><strong>需求：</strong></p>
<p>计算100个1+100个2+100个3+…100个100的结果</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n ; i++) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=n ; j++) &#123; </span><br><span class="line">            sum+=i; &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这个例子中，如果我们要精确的研究循环的条件执行了多少次，是一件很麻烦的事情，并且，由于真正计算和的代码是内循环的循环体，所以，在研究算法的效率时，我们只考虑核心代码的执行次数，这样可以简化分析。</p>
<p>我们研究算法复杂度，侧重的是当输入规模不断增大时，算法的增长量的一个抽象(规律)，而不是精确地定位需要执行多少次，因为如果是这样的话，我们又得考虑回编译期优化等问题，容易主次跌倒。</p>
<p>我们不关心编写程序所用的语言是什么，也不关心这些程序将跑在什么样的计算机上，我们只关心它所实现的算法。这样，不计那些循环索引的递增和循环终止的条件、变量声明、打印结果等操作，最终在分析程序的运行时间时，最重要的是把程序看做是独立于程序设计语言的算法或一系列步骤。我们分析一个算法的运行时间，最重要的就是把核心操作的次数和输入规模关联起来。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122152538851.png" alt="image-20211122152538851"></p>
<h2 id="1-1-1-函数渐近增长"><a href="#1-1-1-函数渐近增长" class="headerlink" title="1.1.1 函数渐近增长"></a><strong>1.1.1</strong> <strong>函数渐近增长</strong></h2><p><strong>概念：</strong></p>
<p>给定两个函数f(n)和g(n),如果存在一个整数N，使得对于所有的n&gt;N,f(n)总是比g(n)大，那么我们说f(n)的增长渐近快于g(n)。概念似乎有点艰涩难懂，那接下来我们做几个测试。</p>
<p><strong>测试一：</strong></p>
<p>假设四个算法的输入规模都是n：</p>
<p> 1.算法A1要做2n+3次操作，可以这么理解：先执行n次循环，执行完毕后，再有一个n次循环，最后有3次运算；</p>
<p> 2.算法A2要做2n次操作；</p>
<p> 3.算法B1要做3n+1次操作，可以这个理解：先执行n次循环，再执行一个n次循环，再执行一个n次循环，最后有1次运算。</p>
<p> 4.算法B2要做3n次操作；那么，上述算法，哪一个更快一些呢？</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122153126181.png"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122153213341.png" alt="image-20211122153213341"></p>
<p>通过数据表格，比较算法A1和算法B1：</p>
<p>当输入规模n=1时，A1需要执行5次，B1需要执行4次，所以A1的效率比B1的效率低；</p>
<p>当输入规模n=2时，A1需要执行7次，B1需要执行7次，所以A1的效率和B1的效率一样；</p>
<p>当输入规模n&gt;2时，A1需要的执行次数一直比B1需要执行的次数少，所以A1的效率比B1的效率高；</p>
<p>所以我们可以得出结论</p>
<p><strong>当输入规模n&gt;2时，算法A1的渐近增长小于算法B1的渐近增长</strong></p>
<p>通过观察折线图，我们发现，随着输入规模的增大，算法A1和算法A2逐渐重叠到一块，算法B1和算法B2逐渐重叠</p>
<p>到一块，所以我们得出结论：</p>
<p><strong>随着输入规模的增大，算法的常数操作可以忽略不计</strong></p>
<p><strong>测试二：</strong></p>
<p>假设四个算法的输入规模都是n：</p>
<p> 1.算法C1需要做4n+8次操作</p>
<p> 2.算法C2需要做n次操作</p>
<p> 3.算法D1需要做2n^2次操作</p>
<p> 4.算法D2需要做n^2次操作</p>
<p>那么上述算法，哪个更快一些？ </p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122153509524.png" alt="image-20211122153509524"></p>
<p>通过数据表格，对比算法C1和算法D1：</p>
<p>当输入规模n&lt;=3时，算法C1执行次数多于算法D1，因此算法C1效率低一些；</p>
<p>当输入规模n&gt;3时，算法C1执行次数少于算法D1，因此，算法D2效率低一些，</p>
<p>所以，总体上，算法C1要优于算法D1</p>
<p>通过折线图，对比对比算法C1和C2：</p>
<p>随着输入规模的增大，算法C1和算法C2几乎重叠</p>
<p>通过折线图，对比算法C系列和算法D系列：</p>
<p>随着输入规模的增大，即使去除n^2前面的常数因子，D系列的次数要远远高于C系列。</p>
<p>因此，可以得出结论：</p>
<p><strong>随着输入规模的增大，与最高次项相乘的常数可以忽略</strong></p>
<p><strong>测试三：</strong></p>
<p>假设四个算法的输入规模都是n：</p>
<p>算法E1:</p>
<p>2n^2+3n+1;</p>
<p>算法E2：</p>
<p>n^2</p>
<p>算法F1：</p>
<p>2n^3+3n+1</p>
<p>算法F2：</p>
<p>n^3</p>
<p>那么上述算法，哪个更快一些？</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122153726332.png" alt="image-20211122153726332"></p>
<p>通过数据表格，对比算法E1和算法F1： </p>
<p>当n=1时，算法E1和算法F1的执行次数一样；</p>
<p>当n&gt;1时，算法E1的执行次数远远小于算法F1的执行次数；</p>
<p>所以算法E1总体上是由于算法F1的。</p>
<p>通过折线图我们会看到，算法F系列随着n的增长会变得特块，算法E系列随着n的增长相比较算法F来说，变得比较</p>
<p>慢，所以可以得出结论：</p>
<p><strong>最高次项的指数大的，随着n的增长，结果也会变得增长特别快</strong></p>
<p><strong>测试四：</strong></p>
<p>假设五个算法的输入规模都是n：</p>
<p>算法G：</p>
<p>n^3;</p>
<p>算法H:</p>
<p>n^2;</p>
<p>算法I：</p>
<p>n:</p>
<p>算法J：</p>
<p>logn</p>
<p>算法K:</p>
<p>1</p>
<p>那么上述算法，哪个效率更高呢？</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122153942400.png" alt="image-20211122153942400"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122153950103.png" alt="image-20211122153950103"></p>
<p>通过观察数据表格和折线图，很容易可以得出结论：</p>
<p><strong>算法函数中n最高次幂越小，算法效率越高</strong></p>
<p>总上所述，在我们比较算法随着输入规模的增长量时，可以有以下规则：</p>
<p><strong>1.算法函数中的常数可以忽略；</strong></p>
<p><strong>2.算法函数中最高次幂的常数因子可以忽略；</strong></p>
<p><strong>3.算法函数中最高次幂越小，算法效率越高。</strong></p>
<h2 id="1-1-2-算法时间复杂度"><a href="#1-1-2-算法时间复杂度" class="headerlink" title="1.1.2 算法时间复杂度"></a><strong>1.1.2 算法时间复杂度</strong></h2><h4 id="1-1-2-1-大O记法"><a href="#1-1-2-1-大O记法" class="headerlink" title="1.1.2.1 大O记法"></a><strong>1.1.2.1 大O记法</strong></h4><p><strong>定义：</strong></p>
<p>在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随着n的变化情况并确定T(n)的量级。算法的时间复杂度，就是算法的时间量度，记作:T(n)=O(f(n))。它表示随着问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称时间复杂度，其中f(n)是问题规模n的某个函数。</p>
<p>在这里，我们需要明确一个事情：<strong>执行次数=执行时间</strong></p>
<p>用大写O()来体现算法时间复杂度的记法，我们称之为大O记法。一般情况下，随着输入规模n的增大，T(n)增长最慢的算法为最优算法。</p>
<p>下面我们使用大O表示法来表示一些求和算法的时间复杂度：</p>
<p>算法一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line"></span><br><span class="line">sum = (n+<span class="number">1</span>)*n/<span class="number">2</span>;<span class="comment">//执行1次 </span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span>+sum); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>算法二：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </span><br><span class="line"></span><br><span class="line">sum += i;<span class="comment">//执行了n次 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>算法三：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n ; i++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=n ; j++) &#123; </span><br><span class="line">sum+=i;<span class="comment">//执行n^2次 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span>+sum); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>如果忽略判断条件的执行次数和输出语句的执行次数，那么当输入规模为n时，以上算法执行的次数分别为：</p>
<p>算法一：3次</p>
<p>算法二：n+3次</p>
<p>算法三：n^2+2次</p>
<p>如果用大O记法表示上述每个算法的时间复杂度，应该如何表示呢？基于我们对函数渐近增长的分析，推导大O阶</p>
<p>的表示法有以下几个规则可以使用：</p>
<p>*<em>1.<strong><strong>用常数</strong></strong>1</em>*<strong>取代运行时间中的所有加法常数；</strong></p>
<p>**2.**<strong>在修改后的运行次数中，只保留高阶项；</strong></p>
<p>*<em>3.<strong><strong>如果最高阶项存在，且常数因子不为</strong></strong>1</em>*<strong>，则去除与这个项相乘的常数；</strong></p>
<p>所以，上述算法的大O记法分别为：</p>
<p>算法一：O(1)</p>
<p>算法二：O(n)</p>
<p>算法三：O(n^2)</p>
<h4 id="1-1-2-2-常见的大O阶"><a href="#1-1-2-2-常见的大O阶" class="headerlink" title="1.1.2.2 常见的大O阶"></a><strong>1.1.2.2 常见的大O阶</strong></h4><p><strong>1.线性阶</strong></p>
<p>一般含有非嵌套循环涉及线性阶，线性阶就是随着输入规模的扩大，对应计算次数呈直线增长，例如：</p>
<p>上面这段代码，它的循环的时间复杂度为O(n),因为循环体中的代码需要执行n次</p>
<p><strong>2.平方阶</strong></p>
<p>一般嵌套循环属于这种时间复杂度</p>
<p>上面这段代码，n=100，也就是说，外层循环每执行一次，内层循环就执行100次，那总共程序想要从这两个循环</p>
<p>中出来，就需要执行100*100次，也就是n的平方次，所以这段代码的时间复杂度是O(n^2).</p>
<p><strong>3.立方阶</strong></p>
<p>一般三层嵌套循环属于这种时间复杂度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,n=<span class="number">100</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n ; i++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;=n ; j++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;=n ; j++) &#123; </span><br><span class="line">x++; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>上面这段代码，n=100，也就是说，外层循环每执行一次，中间循环循环就执行100次，中间循环每执行一次，最</p>
<p>内层循环需要执行100次，那总共程序想要从这三个循环中出来，就需要执行100<em>100</em>100次，也就是n的立方，所</p>
<p>以这段代码的时间复杂度是O(n^3).</p>
<p><strong>4.对数阶</strong></p>
<p>对数，属于高中数学的内容，我们分析程序以程序为主，数学为辅，所以不用过分担心。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,n=<span class="number">100</span>; </span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123; </span><br><span class="line">i = i*<span class="number">2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于每次i*2之后，就距离n更近一步，假设有x个2相乘后大于n，则会退出循环。由于是2^x=n,得到x=log(2)n,所</p>
<p>以这个循环的时间复杂度为O(logn);</p>
<p>对于对数阶，由于随着输入规模n的增大，不管底数为多少，他们的增长趋势是一样的，所以我们会忽略底数。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122170848213.png" alt="image-20211122170848213"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122170858723.png" alt="image-20211122170858723"></p>
<p><strong>5.常数阶</strong></p>
<p>一般不涉及循环操作的都是常数阶，因为它不会随着n的增长而增加操作次数。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=n+<span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">System.out.println(i); </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>上述代码，不管输入规模n是多少，都执行2次，根据大O推导法则，常数用1来替换，所以上述代码的时间复杂度</p>
<p>为O(1)</p>
<p>下面是对常见时间复杂度的一个总结：</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122170928331.png" alt="image-20211122170928331"></p>
<p>他们的复杂程度从低到高依次为：</p>
<p> O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)</p>
<p>根据前面的折线图分析，我们会发现，从平方阶开始，随着输入规模的增大，时间成本会急剧增大，所以，我们的算法，尽可能的追求的是O(1),O(logn),O(n),O(nlogn)这几种时间复杂度，而如果发现算法的时间复杂度为平方阶、立方阶或者更复杂的，那我们可以分为这种算法是不可取的，需要优化。</p>
<h4 id="1-1-2-3-函数调用的时间复杂度分析"><a href="#1-1-2-3-函数调用的时间复杂度分析" class="headerlink" title="1.1.2.3 函数调用的时间复杂度分析"></a><strong>1.1.2.3</strong> <strong>函数调用的时间复杂度分析</strong></h4><p>之前，我们分析的都是单个函数内，算法代码的时间复杂度，接下来我们分析函数调用过程中时间复杂度。</p>
<p><strong>案例一：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line">show(i); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </span><br><span class="line">System.out.println(i); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>在main方法中，有一个for循环，循环体调用了show方法，由于show方法内部只执行了一行代码，所以show方法</p>
<p>的时间复杂度为O(1),那main方法的时间复杂度就是O(n)</p>
<p><strong>案例二：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line">show(i); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; i++) &#123; </span><br><span class="line">System.out.println(i); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main方法中，有一个for循环，循环体调用了show方法，由于show方法内部也有一个for循环，所以show方法</p>
<p>的时间复杂度为O(n),那main方法的时间复杂度为O(n^2)</p>
<p><strong>案例三：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line"></span><br><span class="line">show(n); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line"></span><br><span class="line">show(i); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123; </span><br><span class="line"></span><br><span class="line">System.out.println(j); </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; i++) &#123; </span><br><span class="line"></span><br><span class="line">System.out.println(i); </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>在show方法中，有一个for循环，所以show方法的时间复杂度为O(n),在main方法中，show(n)这行代码内部执行的次数为n，第一个for循环内调用了show方法，所以其执行次数为n^2,第二个嵌套for循环内只执行了一行代码，所以其执行次数为n^2,那么main方法总执行次数为n+n^2+n^2=2n^2+n。根据大O推导规则，去掉n保留最高阶项，并去掉最高阶项的常数因子2，所以最终main方法的时间复杂度为O(n^2)</p>
<h4 id="1-1-2-4-最坏情况"><a href="#1-1-2-4-最坏情况" class="headerlink" title="1.1.2.4 最坏情况"></a><strong>1.1.2.4</strong> <strong>最坏情况</strong></h4><p>从心理学角度讲，每个人对发生的事情都会有一个预期，比如看到半杯水，有人会说：哇哦，还有半杯水哦！但也有人会说：天哪，只有半杯水了。一般人处于一种对未来失败的担忧，而在预期的时候趋向做最坏的打算，这样即使最糟糕的结果出现，当事人也有了心理准备，比较容易接受结果。假如最糟糕的结果并没有出现，当事人会很快乐。</p>
<p>算法分析也是类似，假如有一个需求：</p>
<p>有一个存储了n个随机数字的数组，请从中查找出指定的数字。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">11</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num==arr[i])&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>最好情况：</strong></p>
<p>查找的第一个数字就是期望的数字，那么算法的时间复杂度为O(1)</p>
<p><strong>最坏情况：</strong></p>
<p>查找的最后一个数字，才是期望的数字，那么算法的时间复杂度为O(n)</p>
<p><strong>平均情况：</strong></p>
<p>任何数字查找的平均成本是O(n/2)最坏情况是一种保证，在应用中，这是一种最基本的保障，即使在最坏情况下，也能够正常提供服务，所以，除非特别指定，我们提到的运行时间都指的是最坏情况下的运行时间。</p>
<h2 id="1-2-算法的空间复杂度分析"><a href="#1-2-算法的空间复杂度分析" class="headerlink" title="1.2 算法的空间复杂度分析"></a><strong>1.2</strong> <strong>算法的空间复杂度分析</strong></h2><p>计算机的软硬件都经历了一个比较漫长的演变史，作为为运算提供环境的内存，更是如此，从早些时候的512k,经历了1M，2M，4M…等，发展到现在的8G，甚至16G和32G，所以早期，算法在运行过程中对内存的占用情况也是一个经常需要考虑的问题。我么可以用算法的空间复杂度来描述算法对内存的占用。</p>
<h3 id="1-2-1-java中常见内存占用"><a href="#1-2-1-java中常见内存占用" class="headerlink" title="1.2.1 java中常见内存占用"></a><strong>1.2.1 java中常见内存占用</strong></h3><p>1.基本数据类型内存占用情况</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122171246306.png" alt="image-20211122171246306"></p>
<p>2.计算机访问内存的方式都是一次一个字节</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122184356736.png" alt="image-20211122184356736"></p>
<p>3.一个引用（机器地址）需要8个字节表示：</p>
<p>例如： Date date = new Date(),则date这个变量需要占用8个字节来表示</p>
<p>4.创建一个对象，比如new Date()，除了Date对象内部存储的数据(例如年月日等信息)占用的内存，该对象本身也有内存开销，每个对象的自身开销是16个字节，用来保存对象的头信息。</p>
<p>5.一般内存的使用，如果不够8个字节，都会被自动填充为8字节：</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122184421424.png" alt="image-20211122184421424"></p>
<p>6.java中数组被被限定为对象，他们一般都会因为记录长度而需要额外的内存，一个原始数据类型的数组一般需要24字节的头信息(16个自己的对象开销，4字节用于保存长度以及4个填充字节)再加上保存值所需的内存。</p>
<h3 id="1-2-2-算法的空间复杂度"><a href="#1-2-2-算法的空间复杂度" class="headerlink" title="1.2.2 算法的空间复杂度"></a><strong>1.2.2</strong> <strong>算法的空间复杂度</strong></h3><p>了解了java的内存最基本的机制，就能够有效帮助我们估计大量程序的内存使用情况。</p>
<p>算法的空间复杂度计算公式记作：S(n)=O(f(n)),其中n为输入规模，f(n)为语句关于n所占存储空间的函数。</p>
<p><strong>案例：</strong></p>
<p>对指定的数组元素进行反转，并返回反转的内容。</p>
<p>解法一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse1(<span class="keyword">int</span>[] arr)&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=arr.length;<span class="comment">//申请4个字节 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp;<span class="comment">//申请4个字节 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> start=<span class="number">0</span>,end=n-<span class="number">1</span>;start&lt;=end;start++,end--)&#123; </span><br><span class="line"></span><br><span class="line">temp=arr[start]; </span><br><span class="line"></span><br><span class="line">arr[start]=arr[end]; </span><br><span class="line"></span><br><span class="line">arr[end]=temp; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法二：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse2(<span class="keyword">int</span>[] arr)&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=arr.length;<span class="comment">//申请4个字节 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] temp=<span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//申请n*4个字节+数组自身头信息开销24个字节 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123; </span><br><span class="line"></span><br><span class="line">temp[n-<span class="number">1</span>-i]=arr[i]; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>忽略判断条件占用的内存，我们得出的内存占用情况如下：</p>
<p>算法一：</p>
<p>不管传入的数组大小为多少，始终额外申请4+4=8个字节；</p>
<p>算法二：</p>
<p>4+4n+24=4n+28;</p>
<p>根据大O推导法则，算法一的空间复杂度为O(1),算法二的空间复杂度为O(n),所以从空间占用的角度讲，算法一要</p>
<p>优于算法二。</p>
<p>由于java中有内存垃圾回收机制，并且jvm对程序的内存占用也有优化（例如即时编译），我们无法精确的评估一个java程序的内存占用情况，但是了解了java的基本内存占用，使我们可以对java程序的内存占用情况进行估算。</p>
<p>由于现在的计算机设备内存一般都比较大，基本上个人计算机都是4G起步，大的可以达到32G，所以内存占用一般情况下并不是我们算法的瓶颈，普通情况下直接说复杂度，默认为算法的时间复杂度。</p>
<p>但是，如果你做的程序是嵌入式开发，尤其是一些传感器设备上的内置程序，由于这些设备的内存很小，一般为几kb，这个时候对算法的空间复杂度就有要求了，但是一般做java开发的，基本上都是服务器开发，一般不存在这样的问题。</p>
]]></content>
      
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构和算法概述]]></title>
      <url>/2021/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h1 id="一、数据结构和算法概述"><a href="#一、数据结构和算法概述" class="headerlink" title="一、数据结构和算法概述"></a>一、数据结构和算法概述</h1><h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><p><strong>官方解释：</strong></p>
<p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科。</p>
<p><strong>大白话：</strong></p>
<p>数据结构就是把数据元素按照一定的关系组织起来的集合，用来组织和存储数据</p>
<span id="more"></span>

<h2 id="1-2数据结构分类"><a href="#1-2数据结构分类" class="headerlink" title="1.2数据结构分类"></a>1.2数据结构分类</h2><p>传统上，我们可以把数据结构分为逻辑结构和物理结构两大类。</p>
<p><strong>逻辑结构分类：</strong></p>
<p>逻辑结构是从具体问题中抽象出来的模型，是抽象意义上的结构，按照对象中数据元素之间的相互关系分类，也是</p>
<p>我们后面课题中需要关注和讨论的问题。</p>
<p>a.集合结构：集合结构中数据元素除了属于同一个集合外，他们之间没有任何其他的关系。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122143435518.png" alt="image-20211122143435518"></p>
<p>b.线性结构：线性结构中的数据元素之间存在一对一的关系</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122143448315.png" alt="image-20211122143448315"></p>
<p>c.树形结构：树形结构中的数据元素之间存在一对多的层次关系</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122143638204.png" alt="image-20211122143638204"></p>
<p>d.图形结构：图形结构的数据元素是多对多的关系</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122143703651.png" alt="image-20211122143703651"></p>
<p><strong>物理结构分类：</strong></p>
<p>逻辑结构在计算机中真正的表示方式（又称为映像）称为物理结构，也可以叫做存储结构。常见的物理结构有顺序存储结构、链式存储结构。</p>
<p>顺序存储结构：</p>
<p>把数据元素放到地址连续的存储单元里面，其数据间的逻辑关系和物理关系是一致的 ，比如我们常用的数组就是顺序存储结构。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122143933324.png" alt="image-20211122143933324"></p>
<p>顺序存储结构存在一定的弊端，就像生活中排时也会有人插队也可能有人有特殊情况突然离开，这时候整个结构都处于变化中，此时就需要链式存储结构。</p>
<p>链式存储结构：</p>
<p>是把数据元素存放在任意的存储单元里面，这组存储单元可以是连续的也可以是不连续的。此时，数据元素之间并不能反映元素间的逻辑关系，因此在链式存储结构中引进了一个<strong>指针</strong>存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122144059433.png" alt="image-20211122144059433"></p>
<h2 id="1-3什么是算法？"><a href="#1-3什么是算法？" class="headerlink" title="1.3什么是算法？"></a>1.3什么是算法？</h2><p><strong>官方解释：</strong></p>
<p>算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法解决问题的策略机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。</p>
<p><strong>大白话：</strong></p>
<p>根据一定的条件，对一些数据进行计算，得到需要的结果。</p>
<h2 id="1-4算法初体验"><a href="#1-4算法初体验" class="headerlink" title="1.4算法初体验"></a><strong>1.4</strong>算法初体验</h2><p>在生活中，我们如果遇到某个问题，常常解决方案不是唯一的。</p>
<p>例如从西安到北京，如何去？会有不同的解决方案，我们可以坐飞机，可以坐火车，可以坐汽车，甚至可以步行，不同的解决方案带来的时间成本和金钱成本是不一样的，比如坐飞机用的时间最少，但是费用最高，步行费用最低，但时间最长。</p>
<p>再例如在北京二环内买一套四合院，如何付款？也会有不同的解决方案，可以一次性现金付清，也可以通过银行做按揭。这两种解决方案带来的成本也不一样，一次性付清，虽然当时出的钱多，压力大，但是没有利息，按揭虽然当时出的钱少，压力比较小，但是会有利息，而且30<code>年的总利息几乎是贷款额度的一倍</code>，需要多付钱。</p>
<p>在程序中，我们也可以用不同的算法解决相同的问题，而不同的算法的成本也是不相同的。总体上，一个优秀的算法追求以下两个目标：</p>
<p> 1.花最少的时间完成需求；</p>
<p> 2.占用最少的内存空间完成需求；</p>
<p>下面我们用一些实际案例体验一些算法:</p>
<p><strong>需求1：</strong></p>
<p>  第一种解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </span><br><span class="line">        sum += i; </span><br><span class="line">	&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">100</span>; </span><br><span class="line">    sum = (n+<span class="number">1</span>)*n/<span class="number">2</span>; </span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span>+sum); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一种解法要完成需求，要完成以下几个动作：</p>
<p> 1.定义两个整型变量；</p>
<p> 2.执行100次加法运算；</p>
<p> 3.打印结果到控制台；</p>
<p>第二种解法要完成需求，要完成以下几个动作：</p>
<p> 1.定义两个整型变量；</p>
<p> 2.执行1次加法运算，1次乘法运算，一次除法运算，总共3次运算；</p>
<p> 3.打印结果到控制台；</p>
<p>很明显，第二种算法完成需求，花费的时间更少一些</p>
<p><strong>需求2：</strong></p>
<p>计算10的阶乘</p>
<p>第一种解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//测试，计算10的阶乘 </span></span><br><span class="line">    <span class="keyword">long</span> result = fun1(<span class="number">10</span>); </span><br><span class="line">    System.out.println(result); </span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//计算n的阶乘 </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fun1</span><span class="params">(<span class="keyword">long</span> n)</span></span>&#123; </span><br><span class="line">       <span class="keyword">if</span> (n==<span class="number">1</span>)&#123; </span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">                &#125;</span><br><span class="line">       <span class="keyword">return</span> n*fun1(n-<span class="number">1</span>); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//测试，计算10的阶乘 </span></span><br><span class="line">    <span class="keyword">long</span> result = fun2(<span class="number">10</span>); </span><br><span class="line">    ystem.out.println(result); </span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//计算n的阶乘 </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fun2</span><span class="params">(<span class="keyword">long</span> n)</span></span>&#123; </span><br><span class="line">       <span class="keyword">int</span> result=<span class="number">1</span>; </span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; </span><br><span class="line">           result*=i; </span><br><span class="line">       &#125;<span class="keyword">return</span> result; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>第一种解法，使用递归完成需求，fun1方法会执行10次，并且第一次执行未完毕，调用第二次执行，第二次执行未完毕，调用第三次执行…最终，最多的时候，需要在栈内存同时开辟10块内存分别执行10个fun1方法。</p>
<p>第二种解法，使用for循环完成需求，fun2方法只会执行一次，最终，只需要在栈内存开辟一块内存执行fun2方法即可。</p>
<p>很明显，第二种算法完成需求，占用的内存空间更小。</p>
]]></content>
      
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>/2021/11/29/%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="一、简单排序"><a href="#一、简单排序" class="headerlink" title="一、简单排序"></a><strong>一、简单排序</strong></h1><p>在我们的程序中，排序是非常常见的一种需求，提供一些数据元素，把这些数据元素按照一定的规则进行排序。比如查询一些订单，按照订单的日期进行排序；再比如查询一些商品，按照商品的价格进行排序等等。所以，接下来们要学习一些常见的排序算法。</p>
<p>在java的开发工具包jdk中，已经给我们提供了很多数据结构与算法的实现，比如List，Set，Map，Math等等，都是以API的方式提供，这种方式的好处在于一次编写，多处使用。我们借鉴jdk的方式，也把算法封装到某个类中，那如果是这样，在我们写java代码之前，就需要先进行API的设计，设计好之后，再对这些API进行实现。</p>
<p>就比如我们先设计一套API如下：</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122190806787.png" alt="image-20211122190806787"></p>
<p>然后再使用java代码去实现它。以后我们讲任何数据结构与算法都是以这种方式讲解</p>
<span id="more"></span>

<h2 id="1-1-Comparable接口介绍"><a href="#1-1-Comparable接口介绍" class="headerlink" title="1.1 Comparable接口介绍"></a><strong>1.1 Comparable接口介绍</strong></h2><p>由于我们这里要讲排序，所以肯定会在元素之间进行比较，而Java提供了一个接口Comparable就是用来定义排序规则的，在这里我们以案例的形式对Comparable接口做一个简单的回顾。</p>
<p><strong>需求：</strong></p>
<p> 1.定义一个学生类Student，具有年龄age和姓名username两个属性，并通过Comparable接口提供比较规则；</p>
<p> 2.定义测试类Test，在测试类Test中定义测试方法Comparable getMax(Comparable c1,Comparable c2)完成测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生类 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> username; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.username = username; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> age; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.age = age; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> + </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;, age=&quot;</span> + age + </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义比较规则 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getAge()-o.getAge(); </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student(); </span><br><span class="line"></span><br><span class="line">stu1.setUsername(<span class="string">&quot;zhangsan&quot;</span>); </span><br><span class="line"></span><br><span class="line">stu1.setAge(<span class="number">17</span>); </span><br><span class="line"></span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(); </span><br><span class="line"></span><br><span class="line">stu2.setUsername(<span class="string">&quot;lisi&quot;</span>); </span><br><span class="line"></span><br><span class="line">stu2.setAge(<span class="number">19</span>); </span><br><span class="line"></span><br><span class="line">Comparable max = getMax(stu1, stu2); </span><br><span class="line"></span><br><span class="line">System.out.println(max); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试方法，获取两个元素中的较大值 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title">getMax</span><span class="params">(Comparable c1,Comparable c2)</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cmp = c1.compareTo(c2); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cmp&gt;=<span class="number">0</span>)&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c1; </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c2; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="1-2-冒泡排序"><a href="#1-2-冒泡排序" class="headerlink" title="1.2 冒泡排序"></a><strong>1.2</strong> <strong>冒泡排序</strong></h2><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p>
<p><strong>需求：</strong></p>
<p>排序前：{4,5,6,3,2,1}</p>
<p>  <strong>排序原理：</strong></p>
<ol>
<li><p>比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。</p>
</li>
<li><p>对每一对相邻元素做同样的工作，从开始第一对元素到结尾的最后一对元素。最终最后位置的元素就是最大值。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122202611227.png" alt="image-20211122202611227"></p>
</li>
</ol>
<p><strong>冒泡排序API设计：</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122203014662.png" alt="image-20211122203014662"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序代码 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对数组a中的元素进行排序 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a.length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;i; j++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (greater(a[j],a[j+<span class="number">1</span>]))&#123; </span><br><span class="line"></span><br><span class="line">exch(a,j,j+<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">比较v元素是否大于w元素 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(Comparable v,Comparable w)</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> v.compareTo(w)&gt;<span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数组元素i和j交换位置 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123; </span><br><span class="line"></span><br><span class="line">Comparable t = a[i]; </span><br><span class="line"></span><br><span class="line">a[i]=a[j]; </span><br><span class="line"></span><br><span class="line">a[j]=t; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">Integer[] a = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;; </span><br><span class="line"></span><br><span class="line">Bubble.sort(a); </span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(a)); </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>冒泡排序的时间复杂度分析</strong> 冒泡排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以，我们分析冒泡排序的时间复杂度，主要分析一下内层循环体的执行次数即可。</p>
<p>在最坏情况下，也就是假如要排序的元素为{6,5,4,3,2,1}逆序，那么：</p>
<p>元素比较的次数为：</p>
<p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p>
<p>元素交换的次数为：</p>
<p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p>
<p>总执行次数为：</p>
<p> (N^2/2-N/2)+(N^2/2-N/2)=N^2-N;</p>
<p>按照大O推导法则，保留函数中的最高阶项那么最终冒泡排序的时间复杂度为O(N^2)</p>
<h2 id="1-3-选择排序"><a href="#1-3-选择排序" class="headerlink" title="1.3 选择排序"></a><strong>1.3</strong> <strong>选择排序</strong></h2><p>选择排序是一种更加简单直观的排序方法。</p>
<p><strong>需求：</strong></p>
<p>排序前：{4,6,8,7,9,2,10,1}</p>
<p>排序后：{1,2,4,5,7,8,9,10}</p>
<p><strong>排序原理：</strong></p>
<p> 1.每一次遍历的过程中，都假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较，如果当前索引处的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引</p>
<p> 2.交换第一个索引处和最小值所在的索引处的值</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122212257428.png" alt="image-20211122212257428"></p>
<p><strong>选择排序API设计</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211122212322899.png" alt="image-20211122212322899"></p>
<p><strong>选择排序的代码实现:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">对数组a中的元素进行排序  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=a.length-<span class="number">2</span>;i++)&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//假定本次遍历，最小值所在的索引是i </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> minIndex=i; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (greater(a[minIndex],a[j]))&#123; </span><br><span class="line"><span class="comment">//跟换最小值所在的索引 </span></span><br><span class="line">minIndex=j; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换i索引处和minIndex索引处的值 </span></span><br><span class="line">exch(a,i,minIndex); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">比较v元素是否大于w元素 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(Comparable v,Comparable w)</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> v.compareTo(w)&gt;<span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组元素i和j交换位置 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123; </span><br><span class="line"></span><br><span class="line">Comparable t = a[i]; </span><br><span class="line">a[i]=a[j]; </span><br><span class="line">a[j]=t; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">Integer[] a = &#123;<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">1</span>&#125;; </span><br><span class="line"></span><br><span class="line">Selection.sort(a); </span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(a)); </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择排序的时间复杂度分析： 选择排序使用了双层for循环，其中外层循环完成了数据交换，内层循环完成了数据比较，所以我们分别统计数据 交换次数和数据比较次数：</p>
<p> 数据比较次数： </p>
<p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p>
<p>数据交换次数： </p>
<p>N-1 时间复杂度：</p>
<p>N^2/2-N/2+（N-1）=N^2/2+N/2-1; </p>
<p>根据大O推导法则，保留最高阶项，去除常数因子，时间复杂度为O(N^2);</p>
<h2 id="1-4-插入排序"><a href="#1-4-插入排序" class="headerlink" title="1.4 插入排序"></a>1.4 插入排序</h2><p> 插入排序（Insertion sort）是一种简单直观且稳定的排序算法。</p>
<p> 插入排序的工作方式非常像人们排序一手扑克牌一样。开始时，我们的左手为空并且桌子上的牌面朝下。然后，我 们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在 手中的每张牌进行比较，如下图所示：</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211124202413479.png" alt="image-20211124202413479"></p>
<p><strong>需求：</strong></p>
<p> 排序前：{4,3,2,10,12,1,5,6}</p>
<p> 排序后：{1,2,3,4,5,6,10,12} </p>
<p><strong>排序原理：</strong> </p>
<p>1.把所有的元素分为两组，已经排序的和未排序的； </p>
<p>2.找到未排序的组中的第一个元素，向已经排序的组中进行插入； </p>
<p>3.倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待 插入元素放到这个位置，其他的元素向后移动一位； </p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211124202450095.png" alt="image-20211124202450095"></p>
<p><strong>插入排序API设计：</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211124202811466.png" alt="image-20211124202811466"></p>
<p><strong>插入排序代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对数组a中的元素进行排序</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (greater(a[j-<span class="number">1</span>],a[j]))&#123;</span><br><span class="line">                    exch(a,j-<span class="number">1</span>,j);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    比较v元素是否大于w元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Insertion.sort(a);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>插入排序的时间复杂度分析</strong></p>
<p>插入排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以，我们分析插入排序的时间复 杂度，主要分析一下内层循环体的执行次数即可。 </p>
<p>最坏情况，也就是待排序的数组元素为{12,10,6,5,4,3,2,1}，那么：</p>
<p> 比较的次数为： </p>
<p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)<em>(N-1)/2=N^2/2-N/2;</em></p>
<p>交换的次数为：</p>
<p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p>
<p> 总执行次数为：</p>
<p> (N^2/2-N/2)+(N^2/2-N/2)=N^2-N;</p>
<p> 按照大O推导法则，保留函数中的最高阶项那么最终插入排序的时间复杂度为O(N^2).</p>
<h1 id="二、高级排序"><a href="#二、高级排序" class="headerlink" title="二、高级排序"></a>二、高级排序</h1><h2 id="2-1希尔排序"><a href="#2-1希尔排序" class="headerlink" title="2.1希尔排序"></a>2.1希尔排序</h2><p>希尔排序是插入排序的一种，又称“缩小增量排序”，是插入排序算法的一种更高效的改进版本。</p>
<p>前面学习插入排序的时候，我们会发现一个很不友好的事儿，如果已排序的分组元素为{2,5,7,9,10}，未排序的分组 元素为{1,8}，那么下一个待插入元素为1，我们需要拿着1从后往前，依次和10,9,7,5,2进行交换位置，才能完成真 正的插入，每次交换只能和相邻的元素交换位置。那如果我们要提高效率，直观的想法就是一次交换，能把1放到 更前面的位置，比如一次交换就能把1插到2和5之间，这样一次交换1就向前走了5个位置，可以减少交换的次数， 这样的需求如何实现呢？接下来我们来看看希尔排序的原理。 </p>
<p><strong>需求：</strong> </p>
<p>排序前：{9,1,2,5,7,4,8,6,3,5} </p>
<p>排序后：{1,2,3,4,5,5,6,7,8,9}</p>
<p><strong>排序原理：</strong> </p>
<p>1.选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组； </p>
<p>2.对分好组的每一组数据完成插入排序； </p>
<p>3.减小增长量，最小减为1，重复第二步操作。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211124212343266.png" alt="image-20211124212343266"></p>
<p>增长量h的确定：增长量h的值每一固定的规则，我们这里采用以下规则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (h &lt;a.length/<span class="number">2</span>)&#123;</span><br><span class="line">    h=h*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对数组a的长度，确定增长量h的初始值</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (h &lt;a.length/<span class="number">2</span>)&#123;</span><br><span class="line">            h=h*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.希尔排序</span></span><br><span class="line">        <span class="keyword">while</span> (h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//排序</span></span><br><span class="line">            <span class="comment">//2.1找到待插入的元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h;i&lt;a.length;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j= i;j&gt;=h;j-=h)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (greater(a[j-h],a[j]))&#123;</span><br><span class="line">                        exch(a,j-h,j);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.2把待插入的元素插入到有序数列中</span></span><br><span class="line">            <span class="comment">//减小h的值</span></span><br><span class="line">            h=h/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">  比较v元素是否大于w元素</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Integer[] a = &#123;<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>&#125; ;</span><br><span class="line">            Shell.sort(a);</span><br><span class="line">            System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>希尔排序的时间复杂度分析</strong></p>
<p> 在希尔排序中，增长量h并没有固定的规则，有很多论文研究了各种不同的递增序列，但都无法证明某个序列是最 好的，对于希尔排序的时间复杂度分析，已经超出了我们课程设计的范畴，所以在这里就不做分析了。</p>
<p> 我们可以使用事后分析法对希尔排序和插入排序做性能比较。 </p>
<p>在资料的测试数据文件夹下有一个reverse_shell_insertion.txt文件，里面存放的是从100000到1的逆向数据，我们 可以根据这个批量数据完成测试。测试的思想：在执行排序前前记录一个时间，在排序完成后记录一个时间，两个 时间的时间差就是排序的耗时。 </p>
<p><strong>希尔排序和插入排序性能比较测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortCompare</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;E:\\ShujuJiegou\\src\\com\\qsq_01\\reverse_arr.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            arr.add(Integer.valueOf(line));</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//把集合转为数组</span></span><br><span class="line">        Integer[] a = <span class="keyword">new</span> Integer[arr.size()];</span><br><span class="line">        arr.toArray(a);</span><br><span class="line"></span><br><span class="line">        shell(a);<span class="comment">//17ms</span></span><br><span class="line"><span class="comment">//        insertion(a);//18204ms</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试希尔排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shell</span><span class="params">(Integer[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Shell.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试插入排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertion</span><span class="params">(Integer[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Insertion.sort(a);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-归并排序"><a href="#2-2-归并排序" class="headerlink" title="2.2 归并排序"></a>2.2 归并排序</h2><h3 id="2-2-1-递归"><a href="#2-2-1-递归" class="headerlink" title="2.2.1 递归"></a>2.2.1 递归</h3><p>正式学习归并排序之前，我们得先学习一下递归算法。 </p>
<p><strong>定义：</strong></p>
<p> 定义方法时，在方法内部调用方法本身，称之为递归</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong> </p>
<p>它通常把一个大型复杂的问题，层层转换为一个与原问题相似的，规模较小的问题来求解。递归策略只需要少量的 程序就可以描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。 </p>
<p><strong>注意事项：</strong></p>
<p>在递归中，不能无限制的调用自己，必须要有边界条件，能够让递归结束，因为每一次递归调用都会在栈内存开辟 新的空间，重新执行方法，如果递归的层级太深，很容易造成栈内存溢出。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211125223219262.png" alt="image-20211125223219262"></p>
<p><strong>需求：</strong> </p>
<p>请定义一个方法，使用递归完成求N的阶乘；</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> result = factorial(<span class="number">5</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a*factorial(a-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-归并排序"><a href="#2-2-2-归并排序" class="headerlink" title="2.2.2 归并排序"></a>2.2.2 归并排序</h3><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子 序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序 表，称为二路归并。</p>
<p><strong>需求：</strong> </p>
<p>排序前：{8,4,5,7,1,3,6,2}</p>
<p> 排序后：{1,2,3,4,5,6,7,8} </p>
<p><strong>排序原理：</strong> </p>
<p>1.尽可能的一组数据拆分成两个元素相等的子组，并对每一个子组继续拆分，直到拆分后的每个子组的元素个数是 1为止。 </p>
<p>2.将相邻的两个子组进行合并成一个有序的大组； </p>
<p>3.不断的重复步骤2，直到最终只有一个组为止。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211125232722633.png" alt="image-20211125232722633"></p>
<p><strong>归并排序API设计：</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211125233131280.png" alt="image-20211125233131280"></p>
<p><strong>归并原理：</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211126115432104.png" alt="image-20211126115432104"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211129160334969.png" alt="image-20211129160334969"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211126115457189.png" alt="image-20211126115457189"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211126115504863.png" alt="image-20211126115504863"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211126115512454.png" alt="image-20211126115512454"></p>
<p><strong>归并排序代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] assist;<span class="comment">//归并所需要的辅助数组</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对数组a中的元素进行排序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        assist = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hi = a.length-<span class="number">1</span>;</span><br><span class="line">        sort(a, lo, hi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对数组中从lo到hi的元素进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Comparable[] a ,<span class="keyword">int</span> lo ,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="comment">//安全性检验</span></span><br><span class="line">        <span class="keyword">if</span>(hi&lt;=lo)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对lo到hi之间的数据进行分组</span></span><br><span class="line">        <span class="keyword">int</span> mid = lo+(hi-lo)/<span class="number">2</span>;<span class="comment">//5，9 min=7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//分别对每一组数据进行排序</span></span><br><span class="line">        sort(a,lo,mid);</span><br><span class="line">        sort(a,mid+<span class="number">1</span>,hi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再把每个组中的数据进行归并</span></span><br><span class="line">        merge(a,lo,mid,hi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对数组中,从lo到mid为一组,从mid+1到hi为一组，对这两组数据进行归并</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> mid ,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="comment">//lo到mid这组数据和mid+1到hi这组数据归并到辅助数组assist对应的索引处</span></span><br><span class="line">        <span class="keyword">int</span> i = lo;<span class="comment">//定义一个指针，指向assist数组中开始填充数据的索引</span></span><br><span class="line">        <span class="keyword">int</span> p1 = lo;<span class="comment">//定义一个指针，指向第一组数据的第一个元素</span></span><br><span class="line">        <span class="keyword">int</span> p2 = mid + <span class="number">1</span>;<span class="comment">//定义一个指针，指向第二组数据的第一个元素</span></span><br><span class="line">        <span class="comment">//比较左边小组和右边小组中的元素大小，哪个小，就把哪个数据填充到assist数组中</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= hi) &#123;</span><br><span class="line">            <span class="keyword">if</span> (less(a[p1], a[p2])) &#123;</span><br><span class="line">                assist[i++] = a[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                assist[i++] = a[p2++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//上面的循环结束后，如果退出循环的条件是p1&lt;=mid，则证明左边小组中的数据已经归并完毕，如果退出循环的条件是p2&lt;=hi,则证明右边小组的数据已经填充完毕；</span></span><br><span class="line"><span class="comment">//所以需要把未填充完毕的数据继续填充到assist中,//下面两个循环，只会执行其中的一个</span></span><br><span class="line">        <span class="keyword">while</span>(p1&lt;=mid)&#123;</span><br><span class="line">            assist[i++]=a[p1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p2&lt;=hi)&#123;</span><br><span class="line">            assist[i++]=a[p2++];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//到现在为止，assist数组中，从lo到hi的元素是有序的，再把数据拷贝到a数组中对应的索引处</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index=lo;index&lt;=hi;index++)&#123;</span><br><span class="line">            a[index]=assist[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    比较v元素是否小于w元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数组元素i和j交换位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMerge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        Merge.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>归并排序时间复杂度分析：</strong></p>
<p>归并排序是分治思想的最典型的例子，上面的算法中，对a[lo…hi]进行排序，先将它分为a[lo…mid]和a[mid+1…hi]两部分，分别通过递归调用将他们单独排序，最后将有序的子数组归并为最终的排序结果。该递归的出口在于如果一个数组不能再被分为两个子数组，那么就会执行merge进行归并，在归并的时候判断元素的大小进行排序。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211126163313922.png" alt="image-20211126163313922"></p>
<p>用树状图来描述归并，如果一个数组有8个元素，那么它将每次除以2找最小的子数组，共拆log8次，值为3，所以树共有3层,那么自顶向下第k层有2^k个子数组，每个数组的长度为2^(3-k)，归并最多需要2^(3-k)次比较。因此每层的比较次数为 2^k * 2^(3-k)=2^3,那么3层总共为 3*2^3。</p>
<p>假设元素的个数为n，那么使用归并排序拆分的次数为log2(n),所以共log2(n)层，那么使用log2(n)替换上面3<em>2^3中 的3这个层数，最终得出的归并排序的时间复杂度为：log2(n)</em> 2^(log2(n))=log2(n)*n,根据大O推导法则，忽略底数，最终归并排序的时间复杂度为O(nlogn);</p>
<p><strong>归并排序的缺点：</strong></p>
<p>需要申请额外的数组空间，导致空间复杂度提升，是典型的以空间换时间的操作。</p>
<p><strong>归并排序与希尔排序性能测试：</strong></p>
<p>之前我们通过测试可以知道希尔排序的性能是由于插入排序的，那现在学习了归并排序后，归并排序的效率与希尔排序的效率哪个高呢？我们使用同样的测试方式来完成一样这两个排序算法之间的性能比较。</p>
<p>在资料的测试数据文件夹下有一个reverse_arr.txt文件，里面存放的是从1000000到1的逆向数据，我们可以根据这个批量数据完成测试。测试的思想：在执行排序前前记录一个时间，在排序完成后记录一个时间，两个时间的时间差就是排序的耗时。</p>
<p><strong>希尔排序和插入排序性能比较测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//把文件通过字符流转为数组</span></span><br><span class="line">        <span class="comment">//先从文件转为集合</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\代码\\algorithm\\src\\reverse_arr.txt&quot;</span>));</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(Integer.valueOf(line));</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//把集合转为数组</span></span><br><span class="line">        Integer[] a = <span class="keyword">new</span> Integer[list.size()];</span><br><span class="line">        list.toArray(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        shelltest(a);//26ms</span></span><br><span class="line">        Mergetest(a);<span class="comment">//67ms</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shelltest</span><span class="params">(Integer[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Shell.sort(a);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Mergetest</span><span class="params">(Integer[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Merge.sort(a);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过测试，发现希尔排序和归并排序在处理大批量数据时差别不是很大。</p>
<h2 id="2-3-快速排序"><a href="#2-3-快速排序" class="headerlink" title="2.3 快速排序"></a><strong>2.3</strong> <strong>快速排序</strong></h2><p>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<p><strong>需求：</strong></p>
<p>排序前:{6, 1, 2, 7, 9, 3, 4, 5, 8}</p>
<p>排序后:{1, 2, 3, 4, 5, 6, 7, 8, 9}</p>
<p><strong>排序原理：</strong></p>
<p>1.首先设定一个分界值，通过该分界值将数组分成左右两部分；</p>
<p>2.将大于或等于分界值的数据放到到数组右边，小于分界值的数据放到数组的左边。此时左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值；</p>
<p>3.然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p>
<p>4.重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左侧和右侧两个部分的数据排完序后，整个数组的排序也就完成了。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211126200824781.png" alt="image-20211126200824781"></p>
<p><strong>快速排序API设计:</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211126200853788.png" alt="image-20211126200853788"></p>
<p><strong>切分原理：</strong></p>
<p>把一个数组切分成两个子数组的基本思想：</p>
<p>1.找一个基准值，用两个指针分别指向数组的头部和尾部；</p>
<p>2.先从尾部向头部开始搜索一个比基准值小的元素，搜索到即停止，并记录指针的位置；</p>
<p>3.再从头部向尾部开始搜索一个比基准值大的元素，搜索到即停止，并记录指针的位置；</p>
<p>4.交换当前左边指针位置和右边指针位置的元素；</p>
<p>5.重复2,3,4步骤，直到左边指针的值大于右边指针的值停止。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211126210807716.png" alt="image-20211126210807716"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211126211916353.png" alt="image-20211126211916353"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211126212017200.png" alt="image-20211126212017200"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211126212113250.png" alt="image-20211126212113250"></p>
<p><strong>快速排序代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断数据大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v,Comparable w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w)&lt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组元素i和j交换位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j]= t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对数组内的元素进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hi = a.length-<span class="number">1</span>;</span><br><span class="line">        sort(a,lo,hi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对数组a中从索引lo到索引hi之间的元素进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归出口</span></span><br><span class="line">        <span class="keyword">if</span>(hi&lt;=lo)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要对数组中Lo索引到hi索引处的元素进行分组（左子组和右子组）;</span></span><br><span class="line">        <span class="keyword">int</span> partition = partition(a,lo,hi);<span class="comment">//返回的是分组的分界值所在的索引﹐分界值位置变换后的索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//让左子组有序</span></span><br><span class="line">        sort(a,lo,partition-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//让右子组有序</span></span><br><span class="line">        sort(a,partition+<span class="number">1</span>,hi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对数组a中，从索引lo到索引hi之间的元素进行分组，并返回分组界限对应的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="comment">//确定分界值</span></span><br><span class="line">        Comparable key = a[lo];</span><br><span class="line">        <span class="comment">//定义两个指针,分别指向待切分元素的最小索引处和最大索引处的下一个位置</span></span><br><span class="line">        <span class="keyword">int</span> left = lo;</span><br><span class="line">        <span class="keyword">int</span> right = hi+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//切分</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//先从右往左扫描</span></span><br><span class="line">            <span class="keyword">while</span>(less(key,a[--right]))&#123;</span><br><span class="line">                <span class="keyword">if</span> (right==lo)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从左往右扫描</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[++left],key)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == hi) &#123;</span><br><span class="line">                <span class="keyword">break</span>;s</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//判断left&gt;=right,如果是，则证明扫描完毕，结束循环，如果不是，则交换元素即可。</span></span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            exch(a,left,right);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换分界值</span></span><br><span class="line">        exch(a,lo,right);</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a =&#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        Quick.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>快速排序和归并排序的区别</strong></p>
<p>快速排序是另外一种分治的排序算法，它将一个数组分成两个子数组，将两部分独立的排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并从而将整个数组排序，而快速排序的方式则是当两个数组都有序时，整个数组自然就有序了。在归并排序中，一个数组被等分为两半，归并调用发生在处理整个数组之前，在快速排序中，切分数组的位置取决于数组的内容，递归调用发生在处理整个数组之后。</p>
<p><strong>快速排序时间复杂度分析：</strong></p>
<p>快速排序的一次切分从两头开始交替搜索，直到left和right重合，因此，一次切分算法的时间复杂度为O(n),但整个快速排序的时间复杂度和切分的次数相关。最优情况：每一次切分选择的基准数字刚好将当前序列等分</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211127214900913.png" alt="image-20211127214900913"></p>
<p>如果我们把数组的切分看做是一个树，那么上图就是它的最优情况的图示，共切分了logn次，所以，最优情况下快速排序的时间复杂度为O(nlogn);</p>
<p>最坏情况：每一次切分选择的基准数字是当前序列中最大数或者最小数，这使得每次切分都会有一个子组，那么总共就得切分n次，所以，最坏情况下，快速排序的时间复杂度为O(n^2)</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211127214942265.png" alt="image-20211127214942265"></p>
<p>平均情况：每一次切分选择的基准数字不是最大值和最小值，也不是中值，这种情况我们也可以用数学归纳法证明，快速排序的时间复杂度为O(nlogn),由于数学归纳法有很多数学相关的知识，容易使我们混乱，所以这里就不对平均情况的时间复杂度做证明了。</p>
<h2 id="2-4-排序的稳定性"><a href="#2-4-排序的稳定性" class="headerlink" title="2.4 排序的稳定性"></a><strong>2.4</strong> <strong>排序的稳定性</strong></h2><p><strong>稳定性的定义：</strong></p>
<p>数组arr中有若干元素，其中A元素和B元素相等，并且A元素在B元素前面，如果使用某种排序算法排序后，能够保证A元素依然在B元素的前面，可以说这个该算法是稳定的。</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211129150606809.png" alt="image-20211129150606809"></p>
<p><strong>稳定性的意义：</strong></p>
<p><strong>如果一组数据只需要一次排序，则稳定性一般是没有意义的</strong>，如果一组数据需要多次排序，稳定性是有意义的。例如要排序的内容是一组商品对象，第一次排序按照价格由低到高排序，第二次排序按照销量由高到低排序，如果第二次排序使用稳定性算法，就可以使得相同销量的对象依旧保持着价格高低的顺序展现，只有销量不同的对象才需要重新排序。这样既可以保持第一次排序的原有意义，而且可以减少系统开销。</p>
<p>第一次按照价格从低到高排序：</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211129150707865.png" alt="image-20211129150707865"></p>
<p>第二次按照销量进行从高到低排序：</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211129150721196.png" alt="image-20211129150721196"></p>
<p> <strong>常见排序算法的稳定性：</strong></p>
<p>冒泡排序：</p>
<p>只有当arr[i]&gt;arr[i+1]的时候，才会交换元素的位置，而相等的时候并不交换位置，所以冒泡排序是一种稳定排序算法。</p>
<p>选择排序:</p>
<p>选择排序是给每个位置选择当前元素最小的,例如有数据{5(1)，8 ，5(2)， 2， 9 },第一遍选择到的最小元素为2，所以5(1)会和2进行交换位置，此时5(1)到了5(2)后面，破坏了稳定性，所以选择排序是一种不稳定的排序算法。</p>
<p>插入排序：</p>
<p>比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么把要插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>
<p>希尔排序：</p>
<p>希尔排序是按照不同步长对元素进行插入排序 ,虽然一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是不稳定的。</p>
<p>归并排序：</p>
<p>归并排序在归并的过程中，只有arr[i]&lt;arr[i+1]的时候才会交换位置，如果两个元素相等则不会交换位置，所以它并不会破坏稳定性，归并排序是稳定的。</p>
<p>快速排序：</p>
<p>快速排序需要一个基准值，在基准值的右侧找一个比基准值小的元素，在基准值的左侧找一个比基准值大的元素，然后交换这两个元素，此时会破坏稳定性，所以快速排序是一种不稳定的算法。</p>
]]></content>
      
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法介绍]]></title>
      <url>/2021/11/29/%E8%AF%BE%E7%A8%8B%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><h2 id="1-1课程目标"><a href="#1-1课程目标" class="headerlink" title="1.1课程目标"></a>1.1课程目标</h2><p>数据结构和算法这门课程无论在哪个学校的计算机专业，都是一门必修课，因为这门课程非常重要的，是编程必备的基础但是这门课程是一门不太好学习的课程，因为它学习起来是非常的枯燥乏味的。但是如果你想让自己的编程能力有质的飞跃，不再停留于调用现成的APl，而是追求更完美的实现，那么这门课程就是你的必修课，因为程序设计=数据结构+算法.通过对基础数据结构和算法的学习，能更深层次的理解程序，提升编写代码的能力，让程序的代码更优雅，性能更高。</p>
<span id="more"></span>

<h2 id="1-2课程内容"><a href="#1-2课程内容" class="headerlink" title="1.2课程内容"></a>1.2课程内容</h2><p>1.数据结构和算法概述</p>
<p>⒉.算法分析</p>
<p>3.排序</p>
<p>4.线性表</p>
<p>5.符号表</p>
<p>6.树</p>
<p>7.堆</p>
<p>8.优先队列灸</p>
<p>9.并查集</p>
<p>10.图</p>
]]></content>
      
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络编程]]></title>
      <url>/2021/11/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h1><h2 id="网络编程概述"><a href="#网络编程概述" class="headerlink" title="网络编程概述"></a>网络编程概述</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113113833613.png" alt="image-20211113113833613"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113114112227.png" alt="image-20211113114112227"></p>
<span id="more"></span>

<h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113114531694.png" alt="image-20211113114531694"></p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/Snipaste_2021-11-13_16-09-38.png" alt="Snipaste_2021-11-13_16-09-38"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/Snipaste_2021-11-13_16-15-46.png" alt="Snipaste_2021-11-13_16-15-46"></p>
<h2 id="InetAddress的使用"><a href="#InetAddress的使用" class="headerlink" title="InetAddress的使用"></a>InetAddress的使用</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113163133350.png" alt="image-20211113163133350"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"><span class="comment">//        InetAddress address = InetAddress.getByName(&quot;QSQ&quot;);</span></span><br><span class="line">        InetAddress address = InetAddress.getByName(<span class="string">&quot;192.168.1.101&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String Name = address.getHostName();</span><br><span class="line"></span><br><span class="line">        String ip = address.getHostAddress();</span><br><span class="line"></span><br><span class="line">        System.out.println(Name);</span><br><span class="line">        System.out.println(ip);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113164535035.png" alt="image-20211113164535035"></p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113164644480.png" alt="image-20211113164644480"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113164811863.png" alt="image-20211113164811863"></p>
<h1 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h1><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113164901576.png" alt="image-20211113164901576"></p>
<h2 id="UDP发送数据"><a href="#UDP发送数据" class="headerlink" title="UDP发送数据"></a>UDP发送数据</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113165004188.png" alt="image-20211113165004188"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建发送端的socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="comment">// DatagramSocket() 构造数据报套接字并将其绑定到本地主机上的任何可用端口。</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">        <span class="comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span></span><br><span class="line">        <span class="comment">// 构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="string">&quot;Hello，udp，我来了&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">//        int l = bys.length;</span></span><br><span class="line"><span class="comment">//        InetAddress address = InetAddress.getByName(&quot;QSQ&quot;);</span></span><br><span class="line"><span class="comment">//        int port = 10086;</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys,bys.length,InetAddress.getByName(<span class="string">&quot;QSQ&quot;</span>),<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">        <span class="comment">//send(DatagramPacket p) 从此套接字发送数据报包。</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        ds.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UDP接收数据"><a href="#UDP接收数据" class="headerlink" title="UDP接收数据"></a>UDP接收数据</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113171255606.png" alt="image-20211113171255606"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建接收端的socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="comment">// DatagramSocket(int port) 构造数据报套接字并将其绑定到本地主机上的任何可用端口。</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个数据包,用于接收数据</span></span><br><span class="line">        <span class="comment">//DatagramPacket(byte[] buf, int length)</span></span><br><span class="line">        <span class="comment">// 构造一个 DatagramPacket用于接收长度为 length数据包。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys,bys.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">        ds.receive(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">        <span class="comment">//getData() 返回数据缓冲区。</span></span><br><span class="line"><span class="comment">//        byte[] datas = dp.getData();</span></span><br><span class="line"><span class="comment">//        //setLength(int length) 设置此数据包的长度。</span></span><br><span class="line"><span class="comment">//        int length = dp.getLength();</span></span><br><span class="line"><span class="comment">//        String dataString = new String(datas,0,length);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;数据是：&quot;+dataString);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数据是：&quot;</span>+<span class="keyword">new</span> String(dp.getData(),<span class="number">0</span>,dp.getLength()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭接收端</span></span><br><span class="line">        ds.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h1><h2 id="TCP通信程序-1"><a href="#TCP通信程序-1" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113223405810.png" alt="image-20211113223405810"></p>
<h2 id="TCP发送程序"><a href="#TCP发送程序" class="headerlink" title="TCP发送程序"></a>TCP发送程序</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113224445034.png" alt="image-20211113224445034"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">TCP发送数据的步骤</span></span><br><span class="line"><span class="comment">1:创建客户端的socket对象(Socket)</span></span><br><span class="line"><span class="comment">2:获取输出流，写数据</span></span><br><span class="line"><span class="comment">3:释放资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端的Socket对象（Socket）</span></span><br><span class="line">        <span class="comment">//Socket(InetAddress address, int port)创建流套接字并将其连接到指定IP地址的指定端口号</span></span><br><span class="line"><span class="comment">//        Socket s = new Socket(InetAddress.getByName(&quot;192.168.1.66&quot;),1000);</span></span><br><span class="line">        <span class="comment">//Socket(String host,int port)创建流套接字并将其连接到指定主机上的指定端口号</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输出流，写数据</span></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;hello,tcp,我来了&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TCP接收数据"><a href="#TCP接收数据" class="headerlink" title="TCP接收数据"></a>TCP接收数据</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113235836139.png" alt="image-20211113235836139"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器项的Socket对家(ServerSocket)</span></span><br><span class="line">        <span class="comment">// ServerSocket (int port)创建绑定到指定端口的服务器套接字</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10088</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Socket accept ()侦听要连接到此套接字并接受它</span></span><br><span class="line">         Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流，读数据，并把数据显示在控制台</span></span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bys);</span><br><span class="line">        String data = <span class="keyword">new</span> String(bys, <span class="number">0</span>,len);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据是:&quot;</span> + data);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TCP通信程序练习"><a href="#TCP通信程序练习" class="headerlink" title="TCP通信程序练习"></a>TCP通信程序练习</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114114743476.png" alt="image-20211114114743476"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建客户端的Socket对象（Socket）</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.101&quot;</span>,<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输出流，写数据</span></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;hello,tcp,我来了&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取服务反馈</span></span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bys);</span><br><span class="line">        String data = <span class="keyword">new</span> String(bys,<span class="number">0</span>,len);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端：&quot;</span>+data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器端对象</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听客户端连接，返回一个Socket对象</span></span><br><span class="line">        Socket s= ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流，读数据，并把数据显示在控制台</span></span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bys);</span><br><span class="line">        String data = <span class="keyword">new</span> String(bys,<span class="number">0</span>,len);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器：&quot;</span>+data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出反馈</span></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;数据已收到&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114120346778.png" alt="image-20211114120346778"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端：数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.101&quot;</span>,<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据来源于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="comment">//封装输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;886&quot;</span>.equals(line))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            获取输出流对象</span></span><br><span class="line"><span class="comment">//            OutputStream os = s.getOutputStream();</span></span><br><span class="line"><span class="comment">//            os.write(line.getBytes());</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line"><span class="comment">//        InputStream is = s.getInputStream();</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        ss.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114122650432.png" alt="image-20211114122650432"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端：数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.101&quot;</span>,<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据来源于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="comment">//封装输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;886&quot;</span>.equals(line))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            获取输出流对象</span></span><br><span class="line"><span class="comment">//            OutputStream os = s.getOutputStream();</span></span><br><span class="line"><span class="comment">//            os.write(line.getBytes());</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">        bw.close;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">服务器：接受到的数据写入文本文件</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line"><span class="comment">//        InputStream is = s.getInputStream();</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myNet\\s.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114122658088.png" alt="image-20211114122658088"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端：数据来自于文本文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.101&quot;</span>,<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据来源于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myNet\\myNet.iml&quot;</span>));</span><br><span class="line">        <span class="comment">//封装输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//            获取输出流对象</span></span><br><span class="line"><span class="comment">//            OutputStream os = s.getOutputStream();</span></span><br><span class="line"><span class="comment">//            os.write(line.getBytes());</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        s.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">服务器：接受到的数据写入文本文件</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line"><span class="comment">//        InputStream is = s.getInputStream();</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myNet\\s.iml&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114130053975.png" alt="image-20211114130053975"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端：数据来自于文本文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.101&quot;</span>,<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据来源于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myNet\\myNet.iml&quot;</span>));</span><br><span class="line">        <span class="comment">//封装输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//            获取输出流对象</span></span><br><span class="line"><span class="comment">//            OutputStream os = s.getOutputStream();</span></span><br><span class="line"><span class="comment">//            os.write(line.getBytes());</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出数据上传结束的信息</span></span><br><span class="line">        s.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接受反馈</span></span><br><span class="line">        BufferedReader brClient = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        String readLine = brClient.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的反馈：&quot;</span>+readLine);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        s.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">服务器：接受到的数据写入文本文件</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line"><span class="comment">//        InputStream is = s.getInputStream();</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myNet\\s.iml&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出反馈</span></span><br><span class="line">        BufferedWriter bwSever = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        bwSever.write(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">        bwSever.newLine();</span><br><span class="line">        bwSever.flush();</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114131508121.png" alt="image-20211114131508121"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端：数据来自于文本文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.101&quot;</span>,<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据来源于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myNet\\myNet.iml&quot;</span>));</span><br><span class="line">        <span class="comment">//封装输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//            获取输出流对象</span></span><br><span class="line"><span class="comment">//            OutputStream os = s.getOutputStream();</span></span><br><span class="line"><span class="comment">//            os.write(line.getBytes());</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出数据上传结束的信息</span></span><br><span class="line">        s.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接受反馈</span></span><br><span class="line">        BufferedReader brClient = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        String readLine = brClient.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的反馈：&quot;</span>+readLine);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        s.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">服务器：接受到的数据写入文本文件</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//监听每一个返回的Socket对象</span></span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            <span class="comment">//为每个是对象开启一个线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SeverThread(s)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //获取输入流</span></span><br><span class="line"><span class="comment">////        InputStream is = s.getInputStream();</span></span><br><span class="line"><span class="comment">////        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">////        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line"><span class="comment">//        //接收数据</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));</span></span><br><span class="line"><span class="comment">//        //写数据</span></span><br><span class="line"><span class="comment">//        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;myNet\\s.iml&quot;));</span></span><br><span class="line"><span class="comment">//        String line;</span></span><br><span class="line"><span class="comment">//        while ((line = br.readLine())!=null) &#123;</span></span><br><span class="line"><span class="comment">//            bw.write(line);</span></span><br><span class="line"><span class="comment">//            bw.newLine();</span></span><br><span class="line"><span class="comment">//            bw.flush();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //给出反馈</span></span><br><span class="line"><span class="comment">//        BufferedWriter bwSever = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));</span></span><br><span class="line"><span class="comment">//        bwSever.write(&quot;文件上传成功&quot;);</span></span><br><span class="line"><span class="comment">//        bwSever.newLine();</span></span><br><span class="line"><span class="comment">//        bwSever.flush();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        bw.close();</span></span><br><span class="line"><span class="comment">//        ss.close();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeverThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeverThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//接收数据</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            <span class="comment">//解决名称冲突问题</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;myNet\\copy[&quot;</span>+count+<span class="string">&quot;].iml&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (file.exists())&#123;</span><br><span class="line">                count++;</span><br><span class="line">                file = <span class="keyword">new</span> File(<span class="string">&quot;myNet\\copy[&quot;</span>+count+<span class="string">&quot;].iml&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//写数据</span></span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bw.write(line);</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//给出反馈</span></span><br><span class="line">        BufferedWriter bwSever = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        bwSever.write(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">        bwSever.newLine();</span><br><span class="line">        bwSever.flush();</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[类加载器、反射]]></title>
      <url>/2021/11/29/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118164514143.png" alt="image-20211118164514143"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118164635174.png" alt="image-20211118164635174"></p>
<span id="more"></span>

<h2 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118165255456.png" alt="image-20211118165255456"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118165901901.png" alt="image-20211118165901901"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        CLassLoader中的两个方法</span></span><br><span class="line"><span class="comment">        static ClassLoader getSystemCLassLoader ():返回用于委派的系统类加载器</span></span><br><span class="line"><span class="comment">        ClassLoader getParent ():返回父类加载器进行委派</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//static ClassLoader getSystemCLassLoader ():返回用于委派的系统类加载器</span></span><br><span class="line">        ClassLoader c = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(c);<span class="comment">//AppClassLoader</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ClassLoader getParent ():返回父类加载器进行委派</span></span><br><span class="line">        ClassLoader c2 = c.getParent();</span><br><span class="line">        System.out.println(c2);<span class="comment">//PlatformClassLoader</span></span><br><span class="line"></span><br><span class="line">        ClassLoader c3 = c2.getParent();</span><br><span class="line">        System.out.println(c3);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射的概述"><a href="#反射的概述" class="headerlink" title="反射的概述"></a>反射的概述</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118171248183.png" alt="image-20211118171248183"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118171311347.png" alt="image-20211118171311347"></p>
<h2 id="获取Class类的对象"><a href="#获取Class类的对象" class="headerlink" title="获取Class类的对象"></a>获取Class类的对象</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118171706788.png" alt="image-20211118171706788"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    三种方式获取cLass对象</span></span><br><span class="line"><span class="comment">    1:使用类的class属性来获取该类对应的cLass对象。举例:Student.class将会返回student类对应的cLass对象</span></span><br><span class="line"><span class="comment">    2:调用对象的getClass()方法，返回该对象所属类对应的cLass对象</span></span><br><span class="line"><span class="comment">        该方法是object类中的方法，所有的Java对象都可以调用该方法</span></span><br><span class="line"><span class="comment">    3:使用cLass类中的静态方法forName(String className)，该方法需要传入字符串参数，</span></span><br><span class="line"><span class="comment">        该字符串参数的值是某个类的全路径.也就是完整包名的路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用类的class属性来获取该类对应的Class对象</span></span><br><span class="line">        Class&lt;Student&gt; c1 = Student.class;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        Class&lt;Student&gt; c2 = Student.class;</span><br><span class="line">        System.out.println(c1==c2);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用对象的getClass()方法，返回该对象所属类对应的Class对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        Class&lt;? extends Student&gt; c3 = s.getClass();</span><br><span class="line">        System.out.println(c1==c3);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">        <span class="comment">//使用cLass类中的静态方法forName(String className)</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c4 = Class.forName(<span class="string">&quot;com.qsq_02.Student&quot;</span>);</span><br><span class="line">        System.out.println(c1==c4);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射获取构造方法并使用"><a href="#反射获取构造方法并使用" class="headerlink" title="反射获取构造方法并使用"></a>反射获取构造方法并使用</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118180512715.png" alt="image-20211118180512715"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.qsq_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Constructor&lt;?&gt;[] getConstructors()返回一个包含 Constructor对象的数组，</span></span><br><span class="line">            <span class="comment">//Constructor对象反映了由该 Class对象表示的类的所有公共构造函数。</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons = c.getConstructors();<span class="comment">//公共的构造方法</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor con:cons)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">        <span class="comment">//Constructor&lt;?&gt;[] getDeclaredConstructors()</span></span><br><span class="line">        <span class="comment">// 返回反映由该Class对象表示的类声明的所有构造函数的 Constructor对象的数组。</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons1 = c.getDeclaredConstructors();<span class="comment">//公共、私有、默认的构造方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Constructor con:cons1)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">        <span class="comment">//Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        <span class="comment">// 返回一个 Constructor对象，该对象反映由该 Class对象表示的类的指定公共构造函数。</span></span><br><span class="line">        <span class="comment">//参数:你要获取的构造方法的参数的个数和数据类型对应的字节码文件对象</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Constructor提供了一个类的单个构造函数的信息和访问权限</span></span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs) 使用由此 Constructor对象表示的构造函数，</span></span><br><span class="line">        <span class="comment">// 使用指定的初始化参数来创建和初始化构造函数的声明类的新实例。</span></span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        <span class="comment">// 返回一个 Constructor对象，该对象反映由此 Class对象表示的类或接口的指定构造函数。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射获取构造方法并练习"><a href="#反射获取构造方法并练习" class="headerlink" title="反射获取构造方法并练习"></a>反射获取构造方法并练习</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118194853729.png" alt="image-20211118194853729"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过反射实现如下的操作:</span></span><br><span class="line"><span class="comment">    Student s = new Student(&quot;林青霞&quot; , 30, &quot;西安&quot;);System.out.printLn(s);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.qsq_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public Student(String name，int age,String address)</span></span><br><span class="line">        <span class="comment">// Constructor&lt;T&gt; getConstructor (Class&lt;?&gt;. .. parameterTypes)</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//基本数据类型也可以通过.cLass得到对应的cLass类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// T newInstance(Object... initargs)</span></span><br><span class="line">        Object obj = con.newInstance(<span class="string">&quot;林青霞&quot;</span>, <span class="number">20</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118200143946.png" alt="image-20211118200143946"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.qsq_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public Student(String name，int age,String address)</span></span><br><span class="line">        <span class="comment">// Constructor&lt;T&gt; getConstructor (Class&lt;?&gt;. .. parameterTypes)</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暴力反射</span></span><br><span class="line">        <span class="comment">//public void setAccessible (boolean flag):值为true，取消访问检查</span></span><br><span class="line">        con.setAccessible( <span class="keyword">true</span> );</span><br><span class="line"></span><br><span class="line">        Object obj = con.newInstance(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射获取成员变量并使用"><a href="#反射获取成员变量并使用" class="headerlink" title="反射获取成员变量并使用"></a>反射获取成员变量并使用</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118202030040.png" alt="image-20211118202030040"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射获取成员变量并使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qsq_02.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line"><span class="comment">//        获取class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.qsq_02.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//Field[] getFields ()返回一个包含Field对象的数组,Field对象反映由该cLass对象表示的类或接口的所有可访问公共字段</span></span><br><span class="line">        <span class="comment">//Field[] getDeclaredFields ()返回一个Field对象的数组，反映了由该CLass对象表示的类或接口声明的所有字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Field[] fields = c.getFields();</span></span><br><span class="line">        Field[] fields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields ) &#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Field getField (String name》返回一个Field对象，</span></span><br><span class="line">        <span class="comment">//该对象反映由该class对象表示的类或接口的指定公共成员字段</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Field getDeclaredField (String name)返回一个Field对象，</span></span><br><span class="line">        <span class="comment">//该对象反映由该Class对象表示的类或接口的指定声明字段</span></span><br><span class="line">        Field addresses = c.getField(<span class="string">&quot;address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取无参构造方法创造对象</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        obj .addressField =“西安&quot;;</span></span><br><span class="line">        <span class="comment">// Field提供有关类或接口的单个字段的信息和动态访问</span></span><br><span class="line">        <span class="comment">//void set (Object obj，0bject value)将指定的对象参数中由此Field对象表示的字段设置为指定的新值</span></span><br><span class="line">        addresses.set(obj,<span class="string">&quot;西安&quot;</span>);<span class="comment">//给obj的成员变量addressField赋值为西安士</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//        s.address = &quot;西安&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(s);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射获取成员变量并使用练习"><a href="#反射获取成员变量并使用练习" class="headerlink" title="反射获取成员变量并使用练习"></a>反射获取成员变量并使用练习</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118203118948.png" alt="image-20211118203118948"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException, NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName( <span class="string">&quot;com.qsq_02.Student&quot;</span> );</span><br><span class="line">        <span class="comment">//Student s = new Student();</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con. newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// s.name =“林青霞&quot;;</span></span><br><span class="line"><span class="comment">//        Field nameField = c.getField(&quot;name&quot; ); //NoSuchFieldException: name</span></span><br><span class="line">         Field nameField = c.getDeclaredField(  <span class="string">&quot;name&quot;</span> );</span><br><span class="line">        nameField.setAccessible(<span class="keyword">true</span>);<span class="comment">//爆射</span></span><br><span class="line">        nameField.set(obj,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// s.age = 30;</span></span><br><span class="line">        Field ageField = c.getDeclaredField(  <span class="string">&quot;age&quot;</span>);</span><br><span class="line">        ageField.setAccessible(<span class="keyword">true</span>) ;<span class="comment">//爆射</span></span><br><span class="line">        ageField.set(obj,<span class="number">30</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//S.address=&quot;西安&quot;</span></span><br><span class="line">        Field address = c.getDeclaredField(<span class="string">&quot;address&quot;</span>);</span><br><span class="line"><span class="comment">//        address.setAccessible(true);//爆射</span></span><br><span class="line">        address.set(obj,<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射获取成员方法并使用"><a href="#反射获取成员方法并使用" class="headerlink" title="反射获取成员方法并使用"></a>反射获取成员方法并使用</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118211029953.png" alt="image-20211118211029953"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射获取成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName( <span class="string">&quot;com.qsq_02.Student&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method[] getMethods() 返回一个包含 方法对象的数组， 方法对象反映由该 Class对象表示的类或接口的所有公共方法，包括由类或接口声明的对象以及从超类和超级接口继承的类。</span></span><br><span class="line">        <span class="comment">//method[] getDeclaredMethods() 返回一个包含 方法对象的数组， 方法对象反映由 Class对象表示的类或接口的所有声明方法，包括public，protected，default（package）访问和私有方法，但不包括继承方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Method[] methods = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for (Method method:methods)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(method);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        Method[] methods = c.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Method getMethod(String name, Class&lt;?&gt;... parameterTypes) 返回一个方法对象，</span></span><br><span class="line">        <span class="comment">//该对象反映由该 Class对象表示的类或接口的指定公共成员方法。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        <span class="comment">//返回一个方法对象，它反映此表示的类或接口的指定声明的方法 Class对象。</span></span><br><span class="line"></span><br><span class="line">        Method m = c.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取无参构造方法创建对象</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        obj.m();</span></span><br><span class="line">        <span class="comment">//类或接口上提供有关单一方法的信息和访问权限</span></span><br><span class="line">        <span class="comment">//Object invoke(Object obj, Object... args)</span></span><br><span class="line">        <span class="comment">//在具有指定参数的指定对象上调用此 方法对象表示的基础方法。</span></span><br><span class="line">        <span class="comment">//Object: 返回值类型</span></span><br><span class="line">        <span class="comment">//obj:调用方法的对象</span></span><br><span class="line">        <span class="comment">//args: 方法需要的参数</span></span><br><span class="line">        m.invoke(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//        s.method1();</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射获取成员方法并使用练习"><a href="#反射获取成员方法并使用练习" class="headerlink" title="反射获取成员方法并使用练习"></a>反射获取成员方法并使用练习</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118213403089.png" alt="image-20211118213403089"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    练习:通过反射实现如下操作</span></span><br><span class="line"><span class="comment">        Student s = new Student();</span></span><br><span class="line"><span class="comment">        s.method1();</span></span><br><span class="line"><span class="comment">        s.method2(“林青霞&quot;);</span></span><br><span class="line"><span class="comment">        String ss = s.method3(“林青霞&quot;, 30);</span></span><br><span class="line"><span class="comment">        System.out.printLn(ss);</span></span><br><span class="line"><span class="comment">        s.function( );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName( <span class="string">&quot;com.qsq_02.Student&quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// s.method1();</span></span><br><span class="line">        Method method1 = c.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">        method1.invoke(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.method2(“林青霞&quot;);</span></span><br><span class="line">        Method method2 = c.getMethod(<span class="string">&quot;method2&quot;</span>,String.class);</span><br><span class="line">        method2.invoke(obj,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String ss = s.method3(“林青霞&quot;, 30);</span></span><br><span class="line">        <span class="comment">// System.out.printLn(ss);</span></span><br><span class="line">        Method method3 = c.getMethod(<span class="string">&quot;method3&quot;</span>, String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        Object o = method3.invoke(obj, <span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.function( );</span></span><br><span class="line"><span class="comment">//        Method m4 = c.getMethod(&quot;function&quot;);</span></span><br><span class="line">        Method m4 = c.getDeclaredMethod(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">        m4.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m4.invoke(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射练习"><a href="#反射练习" class="headerlink" title="反射练习"></a>反射练习</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118214612358.png" alt="image-20211118214612358"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        array.add(10);</span></span><br><span class="line"><span class="comment">//        array.add(20);</span></span><br><span class="line"><span class="comment">//        array.add(&quot;hello&quot;);</span></span><br><span class="line">        Class&lt;? extends ArrayList&gt; c = array.getClass();</span><br><span class="line">        Method m = c.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">        m.invoke(array,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        m.invoke(array,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        m.invoke(array,<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118214631241.png" alt="image-20211118214631241"></p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">className = com.qsq<span class="built_in">_</span>05.Teacher</span><br><span class="line">methodName = Teach</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过配置文件运行类的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//        s.Study();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Teacher t = new Teacher();</span></span><br><span class="line"><span class="comment">//        t.Teach();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cLass.txt</span></span><br><span class="line"><span class="comment">        className=XXX</span></span><br><span class="line"><span class="comment">        methodName=XXX</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载数据</span></span><br><span class="line">        <span class="comment">//Properties Map体系的集合，用于读取流中的键值对数据</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        FileReader f = <span class="keyword">new</span> FileReader(<span class="string">&quot;myReflect\\java.txt&quot;</span>);</span><br><span class="line">        prop.load(f);</span><br><span class="line">        f.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        className = com.qsq_05.Student</span></span><br><span class="line"><span class="comment">        methodName = Study</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String className = prop.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName = prop.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(className);</span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        Method m = c.getMethod(methodName);</span><br><span class="line">        m.invoke(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="模块化的概述"><a href="#模块化的概述" class="headerlink" title="模块化的概述"></a>模块化的概述</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118222515334.png" alt="image-20211118222515334"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118223450070.png" alt="image-20211118223450070"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118231754501.png" alt="image-20211118231754501"></p>
<h2 id="模块服务"><a href="#模块服务" class="headerlink" title="模块服务"></a>模块服务</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118232911936.png" alt="image-20211118232911936"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118233159785.png" alt="image-20211118233159785"></p>
]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Stream]]></title>
      <url>/2021/11/17/Stream%E6%B5%81/</url>
      <content type="html"><![CDATA[<h2 id="Stream流中常见的中间操作"><a href="#Stream流中常见的中间操作" class="headerlink" title="Stream流中常见的中间操作"></a>Stream流中常见的中间操作</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118095945575.png" alt="image-20211118095945575"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，储存多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;刘亦菲&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1:取前3个数据在控制台输出</span></span><br><span class="line">        list.stream( ).limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2:跳过3个元素，把剩下的元素在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求3:跳过2个元素，把乘剩下的元素中前2个在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118101735813.png" alt="image-20211118101735813"></p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    static &lt;T&gt; Stream&lt;T&gt; concat (Stream a，Stream b):合并a和b两个流为一个流</span></span><br><span class="line"><span class="comment">    Stream&lt;T&gt; distinct ():返回由该流的不同元素（根据object.equals(Object))组成的流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        <span class="comment">//创建一个集合，储存多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;刘亦菲&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1:取前4个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2:跳过2个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s2 = list.stream().skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3:合并需求1和需求2得到的流，并把结果在控制台输出</span></span><br><span class="line">        Stream.concat(s1,s2).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">        <span class="comment">//需求4:合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复</span></span><br><span class="line">        Stream.concat(s1,s2).distinct().forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118101801407.png" alt="image-20211118101801407"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        Stream&lt;T&gt; sorted ():返回由此流的元素组成的流，根据自然顺序排序</span></span><br><span class="line"><span class="comment">        Stream&lt;T&gt; sorted (Comparator comparator):返回由该流的元素组成的流，根据提供的comparator进行排序</span></span><br><span class="line"><span class="comment">        Comparator接口中的方法int compare (T o1,T o2)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;linqingxia&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;zhangmanyu&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;wangzuxian&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;liuyan&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;zhangmin&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;zhangwuji&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求i:按照字母顺序把数据在控制台输出</span></span><br><span class="line"><span class="comment">//        list.stream( ).sorted( ).forEach(System.out::println);</span></span><br><span class="line">        <span class="comment">//需求2:按照字符串长度把数据在控制台输出</span></span><br><span class="line"><span class="comment">//        list.stream().sorted((s1, s2) -&gt; s1.length() - s2.length()).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.stream().sorted(new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                int num = s1.length()-s2.length();</span></span><br><span class="line"><span class="comment">//                int num1 = num==0?s1.compareTo(s2):num;</span></span><br><span class="line"><span class="comment">//                return num1;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        list.stream().sorted((s1,s2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> num = s1.length()-s2.length();</span><br><span class="line">            <span class="keyword">int</span> num1 = num==<span class="number">0</span>?s1.compareTo(s2):num;</span><br><span class="line">            <span class="keyword">return</span> num1;</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118103239773.png" alt="image-20211118103239773"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;R&gt;Stream&lt;R&gt; map (Function mapper):返回由给定函数应用于此流的元素的结果组成的流</span></span><br><span class="line"><span class="comment">        Function接口中的方法R apply (T t)</span></span><br><span class="line"><span class="comment">    IntStream mapToInt (ToIntFunction mapper):返回一个IntStream其中包含将给定函数应用于此流的元素的结果</span></span><br><span class="line"><span class="comment">        IntStream:表示原始int流</span></span><br><span class="line"><span class="comment">        ToIntFunction接口中的方法int applyAsInt (T value)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;30&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;40&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;50&quot;</span>);</span><br><span class="line">        <span class="comment">//需求:将集合中的字符串数据转换为整数之后在控制台输出</span></span><br><span class="line"><span class="comment">//        list.stream ( ).map(s -&gt; Integer. parseInt(s ) ) .forEach(System.out :: println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.stream ( ).map(Integer :: parseInt).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list.stream ( ) .mapToInt(Integer::parseInt).forEach(System.out::println);</span></span><br><span class="line">        <span class="comment">//int sum()返回此流中元素的总和</span></span><br><span class="line">        <span class="keyword">int</span> result = list.stream().mapToInt(Integer::parseInt).sum();</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stream流中常见的终结操作"><a href="#Stream流中常见的终结操作" class="headerlink" title="Stream流中常见的终结操作"></a>Stream流中常见的终结操作</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118114442376.png" alt="image-20211118114442376"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stream流的常见终结操作方法</span></span><br><span class="line"><span class="comment">//        void forEach (Consumer action):对此流的每个元素执行操作</span></span><br><span class="line"><span class="comment">//        Consumer接口中的方法void accept (T t):对给定的参数执行此操作Long count ():返回此流中的元素数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"><span class="comment">//需求1:把集合中的元素在控制台输出</span></span><br><span class="line">        list.stream().forEach(System.out::println);</span><br><span class="line"><span class="comment">//需求2:统计集合中有几个以张开头的元素，并把统计结果在控制台输出</span></span><br><span class="line">        <span class="keyword">long</span> count = list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118121414003.png" alt="image-20211118121414003"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">现在有两个ArrayList集合，分别存储6名男演员名称和6名女演员名称，要求完成如下的操作:</span></span><br><span class="line"><span class="comment">    1:男演员只要名字为3个字的前三人</span></span><br><span class="line"><span class="comment">    2:女演员只要姓林的,并且不要第一个</span></span><br><span class="line"><span class="comment">    3:把过滤后的男演员姓名和女演员姓名合并到一起</span></span><br><span class="line"><span class="comment">    4 :把上一步操作后的元素作为构造方法的参数创建演员对象，遍历数据</span></span><br><span class="line"><span class="comment">        演员类Actor已经提供，里面有一个成员变量，一个带参构造方法，以及成员变量对应的get/set方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; manList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        manList.add(<span class="string">&quot;周润发&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;成龙&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;吴京&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;李连杰&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; womanList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        womanList.add(<span class="string">&quot;林心如&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林志玲&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        <span class="comment">//男演员只要名字为3个字的前三人</span></span><br><span class="line">        Stream&lt;String&gt; manStream = manList.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//女演员只要姓林的,并且不要第一个</span></span><br><span class="line">        Stream&lt;String&gt; womanStream = womanList.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;林&quot;</span>)).skip(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把过滤后的男演员姓名和女演员姓名合并到一起</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.concat(manStream, womanStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把上一步操作后的元素作为构造方法的参数创建演员对象，遍历数据</span></span><br><span class="line"><span class="comment">//        stream.map(s -&gt; new Actor(s)).forEach(s-&gt; System.out.println(s.getName()));</span></span><br><span class="line">        stream.map(Actor::<span class="keyword">new</span>).forEach(s-&gt; System.out.println(s.getName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211118123403104.png" alt="image-20211118123403104"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Stream流的收集方法</span></span><br><span class="line"><span class="comment">        R collect (Collector collector)</span></span><br><span class="line"><span class="comment">    它是通过工具类collectors提供了具体的收集方式</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; Collector toList ():把元素收集到List集合中</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt;Collector toSet ():把元素收集到set集合中</span></span><br><span class="line"><span class="comment">        public static Collector toMap (Function keyNapper ,function valueMapper)、把元素收集到Map集合中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List集合对家</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        <span class="comment">//需求1:得到名字为3个字的流</span></span><br><span class="line">        Stream&lt;String&gt; listStream = list.stream().filter(s -&gt; s.length() == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2:把使用stream流操作完毕的数据收集到List集合中并遍历</span></span><br><span class="line">        List&lt;String&gt; names = listStream.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建set集合对象</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        set.add(<span class="number">10</span>);</span><br><span class="line">        set.add(<span class="number">20</span>);</span><br><span class="line">        set.add(<span class="number">30</span>);</span><br><span class="line">        set.add(<span class="number">33</span>);</span><br><span class="line">        set.add(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到年龄大于25的流</span></span><br><span class="line">        Stream&lt;Integer&gt; setStream = set.stream().filter(age -&gt; age &gt; <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把使用stream流操作完毕的数据收集到set集合中并遍历</span></span><br><span class="line">        Set&lt;Integer&gt; ages = setStream.collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer  age: ages )&#123;</span><br><span class="line">            System.out.println(age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个字符串数组，每一个字符串数据由姓名数据和年龄数据组合而成</span></span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;林青霞,30&quot;</span>,<span class="string">&quot;张曼玉,35&quot;</span>,<span class="string">&quot;王祖贤,33&quot;</span>,<span class="string">&quot;柳岩,25&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5:得到字符串中年龄数据大于28的流</span></span><br><span class="line"><span class="comment">//        of(T t) 返回包含单个元素的序列 Stream</span></span><br><span class="line">        Stream&lt;String&gt; stringStream = Stream.of(strArray).filter(s -&gt; Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]) &gt; <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求6:把使用stream流操作完毕的数据收集到Map集合中并遍历，字符串中的姓名作键，年龄作值</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = stringStream.collect(Collectors.toMap(s -&gt; s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>], s -&gt; Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>])));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet = map. keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System. out.println( key + <span class="string">&quot;,&quot;</span> + value) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[方法引用]]></title>
      <url>/2021/11/15/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211115213854850.png" alt="image-20211115213854850"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数式接口的注解</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数时接口有且仅有一个抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyInterface my = ()-&gt; System.out.println(<span class="string">&quot;函数时接口&quot;</span>);</span><br><span class="line">        my.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211115220629124.png" alt="image-20211115220629124"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个类(RunnableDemo)，在类中提供两个方法</span></span><br><span class="line"><span class="comment">        —个方法是:startThread ( Runnable r)方法参数Runnable是一个函数式接口</span></span><br><span class="line"><span class="comment">        —个方法是主方法，在主方法中调用startThread方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        startThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        startThread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程启动了&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable r)</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数式接口作为方法的返回值"><a href="#函数式接口作为方法的返回值" class="headerlink" title="函数式接口作为方法的返回值"></a>函数式接口作为方法的返回值</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211115223001438.png" alt="image-20211115223001438"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        array.add(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序前&quot;</span>+array);</span><br><span class="line"></span><br><span class="line">        Collections.sort(array,getComparator());</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后&quot;</span>+array);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">getComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类的方式实现</span></span><br><span class="line"><span class="comment">//        Comparator&lt;String&gt; comp = new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                return s1.length()-s2.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        return comp;</span></span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                return s1.length() - s2.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        return (String s1,String s2)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            return s1.length()-s2.length();</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (s1,s2)-&gt;s1.length()-s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211115233624811.png" alt="image-20211115233624811"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211115234250285.png" alt="image-20211115234250285"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Supplier&lt;T&gt;:包含一个无参的方法</span></span><br><span class="line"><span class="comment">        T get ():获得结果</span></span><br><span class="line"><span class="comment">        该方法不需要参数，它会按照某种实现逻辑(由Lambda表达式实现)返回一个数据</span></span><br><span class="line"><span class="comment">        Supplier&lt;T&gt;接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，</span></span><br><span class="line"><span class="comment">        那么接口中的get方法就会生产什么类型的数据供我们使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = getString(() -&gt; <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        <span class="comment">//依旧是改写接口，把Supplier接口的get方法改写成返回“林青霞”这个字符串</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = getInt(() -&gt; <span class="number">30</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个方法，返回一个字符串数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(Supplier&lt;Integer&gt; sup)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Supplier&lt;String&gt; sup)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211116002143966.png" alt="image-20211116002143966"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Consumer&lt;T&gt;:包含两个方法</span></span><br><span class="line"><span class="comment">        void accept (i t):对给定的参数执行此操作</span></span><br><span class="line"><span class="comment">        default Consumer&lt;T&gt; andThen (Consumer after):返回一个组合的Consumer，依次执行此操作，</span></span><br><span class="line"><span class="comment">        然后执行 after操作Consumer&lt;T&gt;接口也被称为消费型接口，它消费的数据的数据类型由泛型指定</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        operatorString(<span class="string">&quot;林青霞&quot;</span>, <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        operatorString(<span class="string">&quot;林青霞&quot;</span>,(String s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operatorString</span><span class="params">(String name, Consumer&lt;String&gt; con)</span></span>&#123;</span><br><span class="line">        <span class="comment">//消费name</span></span><br><span class="line">        con.accept(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211116232331350.png" alt="image-20211116232331350"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = checkString(<span class="string">&quot;hello&quot;</span>, (String s) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s.length() &gt; <span class="number">8</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = checkString(<span class="string">&quot;helloworld&quot;</span>,s-&gt;s.length()&gt;<span class="number">8</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = checkString(<span class="string">&quot;hello&quot;</span>, s -&gt; s.length() &gt; <span class="number">8</span>, s -&gt; s.length()&lt;<span class="number">15</span>);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b4 = checkString(<span class="string">&quot;helloworld&quot;</span>, s -&gt; s.length() &gt; <span class="number">8</span>, s -&gt; s.length()&lt;<span class="number">15</span>);</span><br><span class="line">        System.out.println(b4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String s, Predicate&lt;String&gt; pre1,Predicate&lt;String&gt; pre2)</span></span>&#123;</span><br><span class="line"><span class="comment">//        boolean b1 = pre1.test(s);</span></span><br><span class="line"><span class="comment">//        boolean b2 = pre2.test(s);</span></span><br><span class="line"><span class="comment">//        boolean b = b1&amp;&amp;b2;</span></span><br><span class="line">        <span class="keyword">boolean</span> b = pre1.and(pre2).test(s);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String s, Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line"><span class="comment">//        return pre.test(s);</span></span><br><span class="line"><span class="comment">//        return !pre.test(s);</span></span><br><span class="line">        <span class="keyword">return</span> pre.negate().test(s);</span><br><span class="line">        <span class="comment">//对输出的结果进行逻辑非改变</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lambda]]></title>
      <url>/2021/11/15/Lambda/</url>
      <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114164747364.png" alt="image-20211114164747364"></p>
<h2 id="体验Lambda表达式"><a href="#体验Lambda表达式" class="headerlink" title="体验Lambda表达式"></a>体验Lambda表达式</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114164827167.png" alt="image-20211114164827167"></p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;多线程程序启动了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">启动一个线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实现类的方法</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(mr);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;多线程程序启动了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式的方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;多线程程序启动了&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式标准格式"><a href="#Lambda表达式标准格式" class="headerlink" title="Lambda表达式标准格式"></a>Lambda表达式标准格式</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114165539377.png" alt="image-20211114165539377"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114165616130.png" alt="image-20211114165616130"></p>
<h2 id="Lambda表达式的练习"><a href="#Lambda表达式的练习" class="headerlink" title="Lambda表达式的练习"></a>Lambda表达式的练习</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114165854221.png" alt="image-20211114165854221"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Eatable</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatableImpl</span> <span class="keyword">implements</span> <span class="title">Eatable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃苹果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Lambda表达式的格式:(形式参数)-&gt;&#123;代码块&#125;</span></span><br><span class="line"><span class="comment">    练习1:</span></span><br><span class="line"><span class="comment">    1:定义一个接口(Eatable)，里面定义一个抽象方法:void eat( );</span></span><br><span class="line"><span class="comment">    2:定义一个测试类(EatableDemo)，在测试类中提供两个方法</span></span><br><span class="line"><span class="comment">       一个方法是:useEatabLe(Eatable e)</span></span><br><span class="line"><span class="comment">       一个方法是主方法，在主方法中调用useEatable方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        在主方法中调用useEatable方法</span></span><br><span class="line">        Eatable e = <span class="keyword">new</span> EatableImpl();</span><br><span class="line">        useEatable(e);</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        useEatable(<span class="keyword">new</span> Eatable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃苹果&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        useEatable(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;吃苹果&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useEatable</span><span class="params">(Eatable e)</span></span>&#123;</span><br><span class="line">        e.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114172645131.png" alt="image-20211114172645131"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span>  </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Lambda表达式的格式:(形式参数)-&gt;&#123;代码块&#125;</span></span><br><span class="line"><span class="comment">    练习1:</span></span><br><span class="line"><span class="comment">    1:定义一个接口(Eatable)，里面定义一个抽象方法:void eat( );</span></span><br><span class="line"><span class="comment">    2:定义一个测试类(EatableDemo)，在测试类中提供两个方法</span></span><br><span class="line"><span class="comment">        —个方法是:useEatabLe(Eatable e)</span></span><br><span class="line"><span class="comment">        —个方法是主方法，在主方法中调用useEatable方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qsq_02.Eatable;</span><br><span class="line"><span class="keyword">import</span> com.qsq_02.EatableImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        useFlyable(<span class="keyword">new</span> Flyable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                System.out.println(<span class="string">&quot;起飞&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        useFlyable((String s)-&gt;&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            System.out.println(<span class="string">&quot;起飞&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useFlyable</span><span class="params">(Flyable f)</span></span>&#123;</span><br><span class="line">        f.fly(<span class="string">&quot;风和日丽&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114175501624.png" alt="image-20211114175501624"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Addable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Lambda表达式的格式:(形式参数)-&gt;&#123;代码块&#125;</span></span><br><span class="line"><span class="comment">            练习3:</span></span><br><span class="line"><span class="comment">            1:定义一个接口(Addable)，里面定义一个抽象方法:int add(int x,int y);</span></span><br><span class="line"><span class="comment">            2:定义一个测试类(AddableDemo)，在测试类中提供两个方法</span></span><br><span class="line"><span class="comment">                一个方法是:useAddable(Addable al</span></span><br><span class="line"><span class="comment">                —个方法是主方法，在主方法中调用useAddable方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        UseAddable(<span class="keyword">new</span> Addable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x+y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        UseAddable((<span class="keyword">int</span> x,<span class="keyword">int</span> y)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> x+y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UseAddable</span><span class="params">(Addable a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a.Add(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式的省略模式"><a href="#Lambda表达式的省略模式" class="headerlink" title="Lambda表达式的省略模式"></a>Lambda表达式的省略模式</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114200757494.png" alt="image-20211114200757494"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//完整</span></span><br><span class="line">        UseAddable((<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//参数的类型可以省略</span></span><br><span class="line">        UseAddable((x, y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果参数只有一个，小括号也可以省略</span></span><br><span class="line">        useFlyable((String s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        useFlyable(s -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果代码块的语句只有一行,可以省略大括号和分号，如果有return，可以省略return</span></span><br><span class="line">        UseAddable((x,y) -&gt; x + y);</span><br><span class="line"></span><br><span class="line">        useFlyable(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UseAddable</span><span class="params">(Addable a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a.Add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useFlyable</span><span class="params">(Flyable f)</span> </span>&#123;</span><br><span class="line">        f.fly(<span class="string">&quot;风和日丽&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式的注意事项"><a href="#Lambda表达式的注意事项" class="headerlink" title="Lambda表达式的注意事项"></a>Lambda表达式的注意事项</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114201531053.png" alt="image-20211114201531053"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda必须有接口，并且接口有且只有一种抽象方法</span></span><br><span class="line">        useInter(()-&gt; System.out.println(<span class="string">&quot;好好学习&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须有上下文环境，才能推导出Lambda对应的接口</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(<span class="string">&quot;Lambda表达式&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useInter</span><span class="params">(Inter i)</span></span>&#123;</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式和匿名内部类的区别"><a href="#Lambda表达式和匿名内部类的区别" class="headerlink" title="Lambda表达式和匿名内部类的区别"></a>Lambda表达式和匿名内部类的区别</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114203602920.png" alt="image-20211114203602920"></p>
]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[接口组成更新]]></title>
      <url>/2021/11/15/%E6%8E%A5%E5%8F%A3%E7%BB%84%E6%88%90%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<h1 id="接口组成更新"><a href="#接口组成更新" class="headerlink" title="接口组成更新"></a>接口组成更新</h1><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114204049234.png" alt="image-20211114204049234"></p>
<h2 id="接口中默认方法"><a href="#接口中默认方法" class="headerlink" title="接口中默认方法"></a>接口中默认方法</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114214856322.png" alt="image-20211114214856322"></p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    void show3();</span></span><br><span class="line"><span class="comment">//    public default void show3()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;Show3&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Show3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImplOne</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;One show1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;One show2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;One show3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求:</span></span><br><span class="line"><span class="comment">    1 :定义一个接口Myinterface，里面有两个抽象方法:</span></span><br><span class="line"><span class="comment">        void show1( );</span></span><br><span class="line"><span class="comment">        void show2( );</span></span><br><span class="line"><span class="comment">    2:定义接口的两个实现类:</span></span><br><span class="line"><span class="comment">        MyInterfaceImpLOneMyInterfaceImpLTwo</span></span><br><span class="line"><span class="comment">    3:定义测试类:</span></span><br><span class="line"><span class="comment">        MyInterfaceDemo</span></span><br><span class="line"><span class="comment">        在主方法中，按照多态的方式创建对象并使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        MyInterface my = <span class="keyword">new</span> MyInterfaceImplOne();</span><br><span class="line">        my.show1();</span><br><span class="line">        my.show2();</span><br><span class="line">        my.show3();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口中的静态方法"><a href="#接口中的静态方法" class="headerlink" title="接口中的静态方法"></a>接口中的静态方法</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114220231816.png" alt="image-20211114220231816"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中的默认方法实现了&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static void test()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;接口中的静态方法实现了&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中的静态方法实现了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="keyword">implements</span> <span class="title">Inter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中的show方法实现了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Inter i =  <span class="keyword">new</span> InterImpl();</span><br><span class="line">        i.show();</span><br><span class="line">        i.method();</span><br><span class="line"><span class="comment">//        i.test;</span></span><br><span class="line">        Inter.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口中的私有方法"><a href="#接口中的私有方法" class="headerlink" title="接口中的私有方法"></a>接口中的私有方法</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211114222612920.png" alt="image-20211114222612920"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show1开始执行&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;3&quot;);</span></span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;show1结束执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show2开始执行&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;3&quot;);</span></span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;show2结束执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method1开始执行&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;3&quot;);</span></span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;method1结束执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method2开始执行&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;2&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;3&quot;);</span></span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;method2结束执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="keyword">implements</span> <span class="title">Inter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Inter i = <span class="keyword">new</span> InterImpl();</span><br><span class="line">        i.show1();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        i.show2();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Inter.method1();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        Inter.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[方法引用]]></title>
      <url>/2021/11/15/%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><h2 id="体验方法引用"><a href="#体验方法引用" class="headerlink" title="体验方法引用"></a>体验方法引用</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211114231738432.png" alt="image-20211114231738432"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printString</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        usePrintable(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用符:：：</span></span><br><span class="line">        <span class="comment">//对象：：方法 类似于 对象.方法</span></span><br><span class="line">        usePrintable(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可推到的就是可省略的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usePrintable</span><span class="params">(Printable p)</span></span>&#123;</span><br><span class="line">        p.printString(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="方法引用符"><a href="#方法引用符" class="headerlink" title="方法引用符"></a>方法引用符</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211114234620255.png" alt="image-20211114234620255"></p>
<h2 id="lambda表达式支持的方法引用"><a href="#lambda表达式支持的方法引用" class="headerlink" title="lambda表达式支持的方法引用"></a>lambda表达式支持的方法引用</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211114234852301.png" alt="image-20211114234852301"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">convert</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在主方法中调用useConverter方法</span></span><br><span class="line"><span class="comment">//        useConverter((String s)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            return Integer.parseInt(s);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        useConverter(s-&gt; Integer.parseInt(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用类方法</span></span><br><span class="line">        useConverter(Integer::parseInt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式被类方式替代的时候，他的形式参数全部传递给静态方法作为参数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useConverter</span><span class="params">(Converter c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = c.convert(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用对象的实例方法"><a href="#引用对象的实例方法" class="headerlink" title="引用对象的实例方法"></a>引用对象的实例方法</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211115195611684.png" alt="image-20211115195611684"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintUppercase</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpper</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        String s1 = s.toUpperCase();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习</span></span><br><span class="line"><span class="comment">    1:定义一个类(PrintString)，里面定义一个方法</span></span><br><span class="line"><span class="comment">    public void printUpper(String s):把字符串参数变成大写的数据，然后在控制台输出</span></span><br><span class="line"><span class="comment">    2:定义一个接口(Printer)，里面定义一个抽象方法</span></span><br><span class="line"><span class="comment">    void printUpperCase ( String s)</span></span><br><span class="line"><span class="comment">    3:定义一个测试类(PrinterDemo)，在测试类中提供两个方法</span></span><br><span class="line"><span class="comment">        一个方法是: usePrinter( Printer p)</span></span><br><span class="line"><span class="comment">        —个方法是主方法，在主方法中调用usePrinter方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrinterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        usePrinter((String s)-&gt;&#123;</span><br><span class="line">            System.out.println(s.toUpperCase());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//Lambda表达式简写</span></span><br><span class="line">        usePrinter(s -&gt; System.out.println(s.toUpperCase()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        PrintString ps = <span class="keyword">new</span> PrintString();</span><br><span class="line">        usePrinter(ps::printUpper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usePrinter</span><span class="params">(Printer p)</span></span>&#123;</span><br><span class="line">        p.PrintUppercase(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用类的实例方法"><a href="#引用类的实例方法" class="headerlink" title="引用类的实例方法"></a>引用类的实例方法</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211115201818860.png" alt="image-20211115201818860"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">mySubString</span><span class="params">(String s, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    练习</span></span><br><span class="line"><span class="comment">        1:定义一个接口(MyString)，里面定义一个抽象方法:</span></span><br><span class="line"><span class="comment">            String mySubString(String s,int x,int y);</span></span><br><span class="line"><span class="comment">        2:定义一个测试类(MyStringDemo)，在测试类中提供两个方法</span></span><br><span class="line"><span class="comment">            一个方法是:useMyString(MyString my )</span></span><br><span class="line"><span class="comment">            —个方法是主方法，在主方法中调用useMyString方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在主方法中调用useMyString方法</span></span><br><span class="line">        useMyString((String s,<span class="keyword">int</span> x,<span class="keyword">int</span> y)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> s.substring(x,y);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        useMyString((s,x,y)-&gt;s.substring(x,y));</span><br><span class="line"></span><br><span class="line">        useMyString(String::substring);</span><br><span class="line">        <span class="comment">//Lambda表达式被类的实例方法替代的时候</span></span><br><span class="line">        <span class="comment">//第一个参数作为调用者</span></span><br><span class="line">        <span class="comment">//后面的参数全部传递给该方法作为参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useMyString</span><span class="params">(MyString my)</span></span>&#123;</span><br><span class="line">        String s = my.mySubString(<span class="string">&quot;helloWorld&quot;</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用构造器"><a href="#引用构造器" class="headerlink" title="引用构造器"></a>引用构造器</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211115205428058.png" alt="image-20211115205428058"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">StudentBuilder</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    练习</span></span><br><span class="line"><span class="comment">    1:定义一个类(Student)，里面有两个成员变量(name, age)</span></span><br><span class="line"><span class="comment">        并提供无参构造方法和带参构造方法，以及成员变量对应的get和set方法</span></span><br><span class="line"><span class="comment">    2:定义一个接口(StudentBuilder)，里面定义一个抽象方法</span></span><br><span class="line"><span class="comment">        student build(String name , int age) ;</span></span><br><span class="line"><span class="comment">    3:定义一个测试类(StudentDemo)，在测试类中提供两个方法</span></span><br><span class="line"><span class="comment">        —个方法是: useStudentBuilder(StudentBuilder s)—个方法是主方法，在主方法中调用useStudentBuilder方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Lambda</span></span><br><span class="line">        useStudentBuilder((name,age)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Student(name,age);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        useStudentBuilder((name,age)-&gt;<span class="keyword">new</span> Student(name,age));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用构造器</span></span><br><span class="line">        useStudentBuilder(Student::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useStudentBuilder</span><span class="params">(StudentBuilder sb)</span></span>&#123;</span><br><span class="line">        Student s = sb.StudentBuilder(<span class="string">&quot;林青霞&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程]]></title>
      <url>/2021/11/12/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112094744484.png" alt="image-20211112094744484"></p>
<span id="more"></span>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112095407909.png" alt="image-20211112095407909"></p>
<h2 id="多线程的实现方法一"><a href="#多线程的实现方法一" class="headerlink" title="多线程的实现方法一"></a>多线程的实现方法一</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112100131765.png" alt="image-20211112100131765"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread m1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread m2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        m1.run();</span></span><br><span class="line"><span class="comment">//        m2.run();</span></span><br><span class="line">        <span class="comment">//直接调用RUN方法启动不了线程</span></span><br><span class="line">        m1.start();</span><br><span class="line">        m2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置和获取线程名称"><a href="#设置和获取线程名称" class="headerlink" title="设置和获取线程名称"></a>设置和获取线程名称</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112103339619.png" alt="image-20211112103339619"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参构造方法</span></span><br><span class="line"><span class="comment">//        MyThread m1 = new MyThread();</span></span><br><span class="line"><span class="comment">//        MyThread m2 = new MyThread();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        m1.setName(&quot;高铁&quot;);</span></span><br><span class="line"><span class="comment">//        m2.setName(&quot;飞机&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//带参构造方法</span></span><br><span class="line"><span class="comment">//        MyThread m1 = new MyThread(&quot;高铁&quot;);</span></span><br><span class="line"><span class="comment">//        MyThread m2 = new MyThread(&quot;飞机&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        m1.run();</span></span><br><span class="line"><span class="comment">////        m2.run();</span></span><br><span class="line"><span class="comment">//        //直接调用RUN方法启动不了线程</span></span><br><span class="line"><span class="comment">//        m1.start();</span></span><br><span class="line"><span class="comment">//        m2.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//static Thread   currentThread() 返回对当前正在执行的线程对象的引用。</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="comment">//返回当前正在引用的线程的名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112105408670.png" alt="image-20211112105408670"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriority</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPiorityDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadPriority tp1 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line">        ThreadPriority tp2 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line">        ThreadPriority tp3 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line"></span><br><span class="line">        tp1.setName(<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line">        tp2.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        tp3.setName(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(tp1.getPriority());//5</span></span><br><span class="line"><span class="comment">//        System.out.println(tp2.getPriority());//5</span></span><br><span class="line"><span class="comment">//        System.out.println(tp3.getPriority());//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(Thread.MAX_PRIORITY);//10</span></span><br><span class="line"><span class="comment">//        System.out.println(Thread.MIN_PRIORITY);//1</span></span><br><span class="line"><span class="comment">//        System.out.println(Thread.NORM_PRIORITY);//5</span></span><br><span class="line"></span><br><span class="line">        tp1.setPriority(<span class="number">1</span>);</span><br><span class="line">        tp2.setPriority(<span class="number">5</span>);</span><br><span class="line">        tp3.setPriority(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tp1.start();</span><br><span class="line">        tp2.start();</span><br><span class="line">        tp3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112110843890.png" alt="image-20211112110843890"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSleep</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadSleep ts1 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line">        ThreadSleep ts2 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line">        ThreadSleep ts3 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line"></span><br><span class="line">        ts1.setName(<span class="string">&quot;曹操&quot;</span>);</span><br><span class="line">        ts2.setName(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">        ts3.setName(<span class="string">&quot;孙权&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ts1.start();</span><br><span class="line">        ts2.start();</span><br><span class="line">        ts3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoin</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoinDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadJoin tj1 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line">        ThreadJoin tj2 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line">        ThreadJoin tj3 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line"></span><br><span class="line">        tj1.setName(<span class="string">&quot;康熙&quot;</span>);</span><br><span class="line">        tj2.setName(<span class="string">&quot;四阿哥&quot;</span>);</span><br><span class="line">        tj3.setName(<span class="string">&quot;八阿哥&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tj1.start();</span><br><span class="line">        tj1.join();</span><br><span class="line">        <span class="comment">//等待这个线程结束再执行</span></span><br><span class="line">        tj2.start();</span><br><span class="line">        tj3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDaemon</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDaemonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDaemon td1 = <span class="keyword">new</span> ThreadDaemon();</span><br><span class="line">        ThreadDaemon td2 = <span class="keyword">new</span> ThreadDaemon();</span><br><span class="line"></span><br><span class="line">        td1.setName(<span class="string">&quot;关羽&quot;</span>);</span><br><span class="line">        td2.setName(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置之线程为刘备</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">        <span class="comment">//设置守护线程</span></span><br><span class="line">        td1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        td2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        td1.start();</span><br><span class="line">        td2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112114439755.png" alt="image-20211112114439755"></p>
<h2 id="多线程实现方式二"><a href="#多线程实现方式二" class="headerlink" title="多线程实现方式二"></a>多线程实现方式二</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112115359280.png" alt="image-20211112115359280"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable类</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建thread类</span></span><br><span class="line">        Thread tr1 = <span class="keyword">new</span> Thread(mr,<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        Thread tr2 = <span class="keyword">new</span> Thread(mr,<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tr1.start();</span><br><span class="line">        tr2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="卖票案例"><a href="#卖票案例" class="headerlink" title="卖票案例"></a>卖票案例</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112122245972.png" alt="image-20211112122245972"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在出售第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">        Thread tr1 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread tr2 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread tr3 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tr1.start();</span><br><span class="line">        tr2.start();</span><br><span class="line">        tr3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="改进卖票"><a href="#改进卖票" class="headerlink" title="改进卖票"></a>改进卖票</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112123826777.png" alt="image-20211112123826777"></p>
<h2 id="解决数据安全问题"><a href="#解决数据安全问题" class="headerlink" title="解决数据安全问题"></a>解决数据安全问题</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112125029548.png" alt="image-20211112125029548"></p>
<h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112125711384.png" alt="image-20211112125711384"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">        Thread tr1 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread tr2 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread tr3 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tr1.start();</span><br><span class="line">        tr2.start();</span><br><span class="line">        tr3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211112232723869.png" alt="image-20211112232723869"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程安全的类：</span></span><br><span class="line"><span class="comment">//StringBuffer</span></span><br><span class="line"><span class="comment">//Vector</span></span><br><span class="line"><span class="comment">//Hashtable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        StringBuffer sb1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        Vector&lt;String&gt; v = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,String&gt; ht = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        HashMap&lt;String,String&gt; hm = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line">        Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;String,String&gt;());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113000129720.png" alt="image-20211113000129720"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    ticket++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">            Thread tr1 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">            Thread tr2 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">            Thread tr3 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">            tr1.start();</span><br><span class="line">            tr2.start();</span><br><span class="line">            tr3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h1><h2 id="生产者和消费者模式概述"><a href="#生产者和消费者模式概述" class="headerlink" title="生产者和消费者模式概述"></a>生产者和消费者模式概述</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113101415613.png" alt="image-20211113101415613"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113101445133.png" alt="image-20211113101445133"></p>
<h2 id="生产者消费者案例"><a href="#生产者消费者案例" class="headerlink" title="生产者消费者案例"></a>生产者消费者案例</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211113113450061.png" alt="image-20211113113450061"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> milk;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义奶箱状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> state = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//放牛奶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title">put</span><span class="params">(<span class="keyword">int</span> milk)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果有牛奶</span></span><br><span class="line">        <span class="keyword">if</span>(state)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有牛奶，放入牛奶，改变奶箱状态</span></span><br><span class="line">        <span class="keyword">this</span>.milk = milk;</span><br><span class="line">        System.out.println(<span class="string">&quot;送奶工将第&quot;</span> + <span class="keyword">this</span>.milk + <span class="string">&quot;瓶牛奶放入奶箱&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//，改变奶箱状态</span></span><br><span class="line">        state = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//唤醒等待的线程</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去牛奶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没有牛奶，等待</span></span><br><span class="line">        <span class="keyword">if</span>(!state)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果有牛奶，拿牛奶</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户拿到第&quot;</span> + <span class="keyword">this</span>.milk + <span class="string">&quot;瓶牛奶&quot;</span>);</span><br><span class="line">        <span class="comment">//改奶香的状态</span></span><br><span class="line">        state = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//唤醒等待的线程</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Box b ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Box b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">            b.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Box b ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Box b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            b.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        生产者消费者案例中包含的类;</span></span><br><span class="line"><span class="comment">            1:奶箱类(Box):定义一个成员变量，表示第x瓶奶，提供存储牛奶和获取牛奶的操作</span></span><br><span class="line"><span class="comment">            2:生产者类(Producer):实现Runnable接口，重写run （)方法，调用存储牛奶的操作</span></span><br><span class="line"><span class="comment">            3:消费者类(Customer):实现Runnable接口，重写run()方法，调用获取牛奶的操作</span></span><br><span class="line"><span class="comment">            4:测试类（BoxDemo):里面有main方法，main方法中的代码步骤如下</span></span><br><span class="line"><span class="comment">                A:创建奶箱对象,这是共享数据区域</span></span><br><span class="line"><span class="comment">                B:创建生产者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用存储牛奶的操作</span></span><br><span class="line"><span class="comment">                C:创建消费者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用获取牛奶的操作</span></span><br><span class="line"><span class="comment">                D:创建2个线程对象，分别把生产者对象和消费者对象作为构造方法参数传递</span></span><br><span class="line"><span class="comment">                E:启动线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建奶箱对象</span></span><br><span class="line">        Box b =  <span class="keyword">new</span> Box();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建生产者对象</span></span><br><span class="line">        Producer p = <span class="keyword">new</span> Producer(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者对象</span></span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创造线程</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件嵌套无法删除问题解决办法]]></title>
      <url>/2021/11/12/%E5%88%A0%E9%99%A4%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E5%AF%BC%E8%87%B4%E7%9A%84%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>无法删除循环嵌套的文件夹</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>用杀毒软件的文件粉碎机，巨好用！！！！！！！！！！！！！！！！！！</p>
]]></content>
      
        
        <tags>
            
            <tag> 问题处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础学习之IO流]]></title>
      <url>/2021/11/09/java%E5%AD%A6%E4%B9%A0%E4%B9%8BIO%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108153514030.png" alt="image-20211108153514030"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;D\\javabiji\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;D\\javabiji&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;D\\javabiji&quot;</span>);</span><br><span class="line">        File f4 = <span class="keyword">new</span> File(f3,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108155010838.png" alt="image-20211108155010838" style="zoom:80%;" />

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line">        <span class="comment">//如果文件不存在，就创建，返回true，否则返false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\javaSE&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line">        <span class="comment">//如果目录不存在，就创建，返回true，否则返false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\javaWEB\\HTML&quot;</span>);</span><br><span class="line">        <span class="comment">//如果目录不存在，就创建，返回true，否则返false,注意：多级目录创建必须用false</span></span><br><span class="line">        System.out.println(f3.mkdirs());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\javase.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建文件用创建文件的方法，创建目录用创建目录的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(f4.mkdirs());</span></span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108160432165.png" alt="image-20211108160432165"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f.isDirectory());</span><br><span class="line">        System.out.println(f.isFile());</span><br><span class="line">        System.out.println(f.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">        System.out.println(f.getPath());</span><br><span class="line">        System.out.println(f.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji&quot;</span>);</span><br><span class="line">        String[] list = f1.list();</span><br><span class="line">        <span class="keyword">for</span> (String str :list)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = f1.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file:files)&#123;</span><br><span class="line"><span class="comment">//            System.out.println(file);</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108165038617.png" alt="image-20211108165038617"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\javase.txt&quot;</span>);</span><br><span class="line"><span class="comment">//          System.out.println(f1.createNewFile());</span></span><br><span class="line"><span class="comment">//        System.out.println(f1.getAbsolutePath());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除模块目录下的javase.txt文件</span></span><br><span class="line">        System.out.println(f1.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目录</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\javase&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f2.mkdir());</span></span><br><span class="line">        <span class="comment">//删除目录</span></span><br><span class="line">        System.out.println(f2.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录加文件</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\javase&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji\\javase\\javase.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f4.createNewFile());</span></span><br><span class="line">        <span class="comment">//删除目录</span></span><br><span class="line"><span class="comment">//        System.out.println(f3.delete());目录下有内容无法删除</span></span><br><span class="line">        System.out.println(f4.delete());</span><br><span class="line">        System.out.println(f3.delete());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108185743641.png" alt="image-20211108185743641"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//普通方法求兔子数量</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr[<span class="number">19</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//递归法求兔子数量</span></span><br><span class="line">        System.out.println(f(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归法求兔子数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f(n-<span class="number">1</span>)+f(n-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108185959510.png" alt="image-20211108185959510"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiguiTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入数字的阶乘为：&quot;</span>+jc(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jc</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i*jc(i-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108191726680.png" alt="image-20211108191726680"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigUiTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File srcfile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\javabiji&quot;</span>);</span><br><span class="line">        getAllFilePath(srcfile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFilePath</span><span class="params">(File srcfile)</span></span>&#123;</span><br><span class="line">        File[] fileArray = srcfile.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (fileArray != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (File file :fileArray) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                    getAllFilePath(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(file.getAbsoluteFile());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108200751238.png" alt="image-20211108200751238"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108200959783.png" alt="image-20211108200959783"></p>
<h2 id="字节流写数据"><a href="#字节流写数据" class="headerlink" title="字节流写数据"></a>字节流写数据</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108202838936.png" alt="image-20211108202838936"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line"><span class="comment">//最后需要释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108202855337.png" alt="image-20211108202855337"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//根据字符串得到字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="string">&quot;&#123;97,98,99,100&#125;&quot;</span>.getBytes();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes1 = &#123;<span class="number">90</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">94</span>&#125;;</span><br><span class="line"><span class="comment">//        fos.write(97);</span></span><br><span class="line"><span class="comment">//        fos.write(98);</span></span><br><span class="line"><span class="comment">//        fos.write(99);</span></span><br><span class="line"><span class="comment">//        fos.write(100);</span></span><br><span class="line"><span class="comment">//        fos.write(101);</span></span><br><span class="line"><span class="comment">//        fos.write(102);</span></span><br><span class="line"><span class="comment">//        fos.write(103);</span></span><br><span class="line"><span class="comment">//        fos.write(104);</span></span><br><span class="line"><span class="comment">//        fos.write(105);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        fos.write(bytes);</span></span><br><span class="line">        <span class="comment">//从指定的索引开始写固定长度的字节</span></span><br><span class="line">        fos.write(bytes,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108210845457.png" alt="image-20211108210845457"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//append:ture实现每运行一次添加一次数据</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">            <span class="comment">//换行符\r\n</span></span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节流写数据异常处理"><a href="#字节流写数据异常处理" class="headerlink" title="字节流写数据异常处理"></a>字节流写数据异常处理</h2><p>​        在进行字节流编入数据时会报异常，简单的方法是采用throws抛出异常，但为了代码的健壮采取try catch的方法去处理异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;<span class="comment">//为了防止无法关闭资源</span></span><br><span class="line">            <span class="comment">//为了防止空指针异常</span></span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节流读取数据-一次一个字节"><a href="#字节流读取数据-一次一个字节" class="headerlink" title="字节流读取数据,一次一个字节"></a>字节流读取数据,一次一个字节</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211108213834394.png" alt="image-20211108213834394"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//第一次读取数据</span></span><br><span class="line"><span class="comment">//        System.out.println(fis.read());</span></span><br><span class="line">        <span class="comment">//第二次读取数据</span></span><br><span class="line"><span class="comment">//        System.out.println((char)fis.read());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当读取到数据的末尾时会返回-1，利用循环读取所有的数据</span></span><br><span class="line"><span class="comment">//        int i = fis.read();</span></span><br><span class="line"><span class="comment">//        while (i!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println((char)i);</span></span><br><span class="line"><span class="comment">//            i=fis.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//优化上面的程序</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制文本文件案例"><a href="#复制文本文件案例" class="headerlink" title="复制文本文件案例"></a>复制文本文件案例</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109100146256.png" alt="image-20211109100146256"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流对象</span></span><br><span class="line">        FileInputStream  fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\javabiji\\java.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\java.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            fos.write(i);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节流读取数据，一次一个字节数组"><a href="#字节流读取数据，一次一个字节数组" class="headerlink" title="字节流读取数据，一次一个字节数组"></a>字节流读取数据，一次一个字节数组</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109101814123.png" alt="image-20211109101814123"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\java.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line"><span class="comment">//        byte[] byt = new byte[5];</span></span><br><span class="line"><span class="comment">//        //第一次读取数据</span></span><br><span class="line"><span class="comment">//        int len = fis.read(byt);</span></span><br><span class="line"><span class="comment">//        //实际读取的字节个数</span></span><br><span class="line"><span class="comment">//        System.out.println(len);</span></span><br><span class="line"><span class="comment">//        //得到读取的数据</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(byt,0,len));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //第二次读取数据</span></span><br><span class="line"><span class="comment">//        len = fis.read(byt);</span></span><br><span class="line"><span class="comment">//        //实际读取的字节个数</span></span><br><span class="line"><span class="comment">//        System.out.println(len);</span></span><br><span class="line"><span class="comment">//        //得到读取的数据</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(byt,0,len));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //第三次读取数据</span></span><br><span class="line"><span class="comment">//        len = fis.read(byt);</span></span><br><span class="line"><span class="comment">//        //实际读取的字节个数</span></span><br><span class="line"><span class="comment">//        System.out.println(len);</span></span><br><span class="line"><span class="comment">//        //得到读取的数据</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(byt,0,len));</span></span><br><span class="line">        <span class="keyword">byte</span>[] byt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//一般是1024的整数倍</span></span><br><span class="line">        <span class="keyword">int</span> len ;</span><br><span class="line">        <span class="keyword">while</span> ((len= fis.read(byt))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(byt,<span class="number">0</span> ,len));</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制图片案例"><a href="#复制图片案例" class="headerlink" title="复制图片案例"></a>复制图片案例</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109105533042.png"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\javabiji\\xx.png&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\xx.png&quot;</span>);</span><br><span class="line">        <span class="comment">//创建数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] byt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(byt))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(byt,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109125847855.png" alt="image-20211109125847855"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        //创建字节输出流</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(&quot;myByteStream\\bos.txt&quot;);</span></span><br><span class="line"><span class="comment">//        //创建缓冲区</span></span><br><span class="line"><span class="comment">//        BufferedOutputStream bos = new BufferedOutputStream(fos);</span></span><br><span class="line">        <span class="comment">//简化创建字节缓冲输出流</span></span><br><span class="line"><span class="comment">//        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;myByteStream\\bos.txt&quot;));</span></span><br><span class="line"><span class="comment">//        bos.write(&quot;hello\r\n&quot;.getBytes());</span></span><br><span class="line"><span class="comment">//        bos.write(&quot;world\r\n&quot;.getBytes());</span></span><br><span class="line"><span class="comment">//        //释放资源</span></span><br><span class="line"><span class="comment">//        bos.close();</span></span><br><span class="line">        <span class="comment">//创建字节缓冲输入流</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\bos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //一次读取一个字节的数据</span></span><br><span class="line"><span class="comment">//        int i;</span></span><br><span class="line"><span class="comment">//        while ((i=bis.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)i);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //释放资源</span></span><br><span class="line"><span class="comment">//        bis.close();</span></span><br><span class="line">        <span class="comment">//一次读取一个字节数组的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] byt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len= bis.read(byt))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//String(byte[] bytes, int offset, int length) 通过使用平台的默认字符集解码指定的字节子阵列来构造新的 String 。</span></span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(byt,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制视频案例"><a href="#复制视频案例" class="headerlink" title="复制视频案例"></a>复制视频案例</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109153755504.png" alt="image-20211109153755504"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyVideoDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//四种方法实现复制视频</span></span><br><span class="line">    <span class="comment">//1.基本字节流一次读取一个字节  共耗时：54507毫秒</span></span><br><span class="line">    <span class="comment">//2.基本字节流一次读取一个数组的字节    共耗时：69毫秒</span></span><br><span class="line">    <span class="comment">//3.缓冲流一次读取一个字节      共耗时：99毫秒</span></span><br><span class="line">    <span class="comment">//4.缓冲流一次读取一个数组的字节   共耗时：16毫秒</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> StartTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制视频</span></span><br><span class="line">        method4();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> EndTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span>+(EndTime-StartTime)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.基本字节流一次读取一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\javabiji\\猫.mp4&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\猫.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(i);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.基本字节流一次读取一个数组的字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\javabiji\\猫.mp4&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\猫.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i=fis.read(bys))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bys,<span class="number">0</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.缓冲流一次读取一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\javabiji\\猫.mp4&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\猫.mp4&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i=bis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(i);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.缓冲流一次读取一个数组的字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\javabiji\\猫.mp4&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\猫.mp4&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i=bis.read(bys))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109161854341.png" alt="image-20211109161854341"></p>
<h2 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109162420118.png" alt="image-20211109162420118"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109162523140.png" alt="image-20211109162523140"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109162809609.png" alt="image-20211109162809609"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109163013239.png" alt="image-20211109163013239"></p>
<h2 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109163222290.png" alt="image-20211109163222290"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串</span></span><br><span class="line">        String s = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编码</span></span><br><span class="line">        <span class="comment">// byte[] getBytes():使用平台默认的编码方式</span></span><br><span class="line"><span class="comment">//        byte[] bytes = s.getBytes();[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="comment">// byte[] getBytes(String charsetName):使用指定的编码方式</span></span><br><span class="line"><span class="comment">//        byte[] bytes = s.getBytes(&quot;UTF-8&quot;);[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s.getBytes(<span class="string">&quot;GBK&quot;</span>);<span class="comment">//[-42, -48, -71, -6]</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="comment">//String(byte[] bytes):使用平台默认的解码方式来构造新的String</span></span><br><span class="line"><span class="comment">//        String ss = new String(bytes);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// String(byte[] String charsetName):使用指定的解码方式来构造新的String</span></span><br><span class="line">        String ss = <span class="keyword">new</span> String(bytes,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流中的编码解码"><a href="#字符流中的编码解码" class="headerlink" title="字符流中的编码解码"></a>字符流中的编码解码</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109170633260.png" alt="image-20211109170633260"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    InputStreamReader是从字节流到字符流的桥梁：</span></span><br><span class="line"><span class="comment">         它读取字节，并使用指定的charset将其解码为字符。</span></span><br><span class="line"><span class="comment">         它使用的字符集可以由名称指定，也可以被明确指定，</span></span><br><span class="line"><span class="comment">         或者可以接受平台的默认字符集。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    OutputStreamWriter是从字符流到字节流的桥梁：</span></span><br><span class="line"><span class="comment">        使用指定的charset将写入的字符编码为字节。</span></span><br><span class="line"><span class="comment">        它使用的字符集可以由名称指定，也可以被明确指定，</span></span><br><span class="line"><span class="comment">        或者可以接受平台的默认字符集。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConversionStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//编码</span></span><br><span class="line">        <span class="comment">//    OutputStreamWriter(OutputStream out) 创建一个使用默认字符编码的OutputStreamWriter。</span></span><br><span class="line">        <span class="comment">//    OutputStreamWriter(OutputStream out, String charsetName) 创建一个使用命名字符集的Ou</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//     FileOutputStream fis = new FileOutputStream(&quot;myCharStream\\osw.txt&quot;);</span></span><br><span class="line">        <span class="comment">//     OutputStreamWriter osw = new OutputStreamWriter(fis);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;myCharStream\\osw.txt&quot;));</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="comment">//        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;myCharStream\\osw.txt&quot;),&quot;GBK&quot;);</span></span><br><span class="line">        osw.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="comment">//    InputStreamReader(InputStream in) 创建一个使用默认字符集的InputStreamReader。</span></span><br><span class="line">        <span class="comment">//    InputStreamReader(InputStream in, String charsetName)创建一个使用命名字符集的InputStreamReader。</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">while</span> ((i = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流写数据的5种方式"><a href="#字符流写数据的5种方式" class="headerlink" title="字符流写数据的5种方式"></a>字符流写数据的5种方式</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109173809669.png" alt="image-20211109173809669"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109175156117.png" alt="image-20211109175156117"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//写入一个字符</span></span><br><span class="line">        osw.write(<span class="number">97</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入一个字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = &#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">        osw.write(chars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入一个字符数组的一部分</span></span><br><span class="line">        osw.write(chars, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入一个字符串</span></span><br><span class="line">        osw.write(<span class="string">&quot;ghijkl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入一个字符串的一部分</span></span><br><span class="line">        osw.write(<span class="string">&quot;mnopqrst&quot;</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        osw.flush();<span class="comment">//刷新流</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流读数据"><a href="#字符流读数据" class="headerlink" title="字符流读数据"></a>字符流读数据</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109181319824.png" alt="image-20211109181319824"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\myCharStream.iml&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch ;</span></span><br><span class="line"><span class="comment">//        while((ch=isr.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        isr.close();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> ch ;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(chs,<span class="number">0</span>,ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制java文件"><a href="#复制java文件" class="headerlink" title="复制java文件"></a>复制java文件</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109183842191.png" alt="image-20211109183842191"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">copyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建输入流对象</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建输出流对象</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次编写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch ;</span></span><br><span class="line"><span class="comment">//        while ((ch=isr.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            osw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        isr.close();</span></span><br><span class="line"><span class="comment">//        osw.close();</span></span><br><span class="line">        <span class="comment">//一次编写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(chs,<span class="number">0</span>,ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="改进版："><a href="#改进版：" class="headerlink" title="改进版："></a>改进版：</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109185908694.png" alt="image-20211109185908694"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">copyJavaDemo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">//利用OutputStream和InputStream的子类FileWriter和FileReader</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次编写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch ;</span></span><br><span class="line"><span class="comment">//        while ((ch=fr.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            fw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        fr.close();</span></span><br><span class="line"><span class="comment">//        fw.close();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次编写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=fr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fw.write(chs,<span class="number">0</span>,ch);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109191702680.png" alt="image-20211109191702680"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    字符缓冲流:</span></span><br><span class="line"><span class="comment">        BufferedWriter:将文本写入字符输出流，缓中字符，以提供单个字符，数组和字符串的高效写入，可</span></span><br><span class="line"><span class="comment">        以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途</span></span><br><span class="line"><span class="comment">        BufferedReader:从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。默认值足够大，可用于大多数用途</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        构造方法:</span></span><br><span class="line"><span class="comment">        BufferedWriter(Writer out)</span></span><br><span class="line"><span class="comment">        BufferedReader(Reader in)*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;myCharStream\\bw.txt&quot;));</span></span><br><span class="line"><span class="comment">//        bw.write(&quot;hello\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        bw.write(&quot;world\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        bw.flush();</span></span><br><span class="line"><span class="comment">//        bw.close();</span></span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch ;</span></span><br><span class="line"><span class="comment">//        while ((ch=br.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char) ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        br.close();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //一次编写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=br.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(chs,<span class="number">0</span>,ch));</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制JAVA文件字符缓冲流改进"><a href="#复制JAVA文件字符缓冲流改进" class="headerlink" title="复制JAVA文件字符缓冲流改进"></a>复制JAVA文件字符缓冲流改进</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109194609506.png" alt="image-20211109194609506"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//建立字符缓冲输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//建立字符缓冲输入流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次编写一个字符</span></span><br><span class="line"><span class="comment">//        int i ;</span></span><br><span class="line"><span class="comment">//        while ((i=br.read())!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            bw.write(i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        bw.close();</span></span><br><span class="line"><span class="comment">//        br.close();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次编写一个数组字符</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">while</span> ((i=br.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bw.write(chs,<span class="number">0</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符缓冲流特有功能"><a href="#字符缓冲流特有功能" class="headerlink" title="字符缓冲流特有功能"></a>字符缓冲流特有功能</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109195931998.png" alt="image-20211109195931998"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    BufferedWriter:</span></span><br><span class="line"><span class="comment">        void newLine():写一行行分隔符，行分隔符字符串由系统属性定义</span></span><br><span class="line"><span class="comment">    BufferedReader:</span></span><br><span class="line"><span class="comment">        public String readLine():读一行文字。结果包含行的内容的字符串，不包括任何行终止字符，如果流的结尾已经到达，则为null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line"><span class="comment">//        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;myCharStream\\bw.txt&quot;));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        for (int i= 0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">//            bw.write(&quot;hello&quot;+i);</span></span><br><span class="line"><span class="comment">//            bw.newLine();</span></span><br><span class="line"><span class="comment">//            bw.flush();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        bw.close();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制JAVA文件字符缓冲流特有功能改进"><a href="#复制JAVA文件字符缓冲流特有功能改进" class="headerlink" title="复制JAVA文件字符缓冲流特有功能改进"></a>复制JAVA文件字符缓冲流特有功能改进</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109201732642.png" alt="image-20211109201732642"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次编写一个字符</span></span><br><span class="line">        String line ;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IO流小结"><a href="#IO流小结" class="headerlink" title="IO流小结"></a>IO流小结</h2><p><strong>字节</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109202814618.png" alt="image-20211109202814618"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109202738885.png" alt="image-20211109202738885"></p>
<p><strong>字符</strong></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109202842397.png" alt="image-20211109202842397"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211109202930853.png" alt="image-20211109202930853"></p>
<h2 id="集合到文件案例"><a href="#集合到文件案例" class="headerlink" title="集合到文件案例"></a>集合到文件案例</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110100111171.png" alt="image-20211110100111171"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//建立集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        BufferedWriter br = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (String s  :array)&#123;</span><br><span class="line">            br.write(s);</span><br><span class="line">            br.newLine();</span><br><span class="line">            br.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件到集合"><a href="#文件到集合" class="headerlink" title="文件到集合"></a>文件到集合</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110102103311.png" alt="image-20211110102103311"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxtToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        System.out.println(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="点名器"><a href="#点名器" class="headerlink" title="点名器"></a>点名器</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110102508015.png" alt="image-20211110102508015"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallNameDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建随机数</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(array.size());</span><br><span class="line"></span><br><span class="line">        String s = array.get(i);</span><br><span class="line">        System.out.println(<span class="string">&quot;幸运儿是：&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合到文件案例改进版"><a href="#集合到文件案例改进版" class="headerlink" title="集合到文件案例改进版"></a>集合到文件案例改进版</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110104205085.png" alt="image-20211110104205085"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;001&quot;</span>,<span class="string">&quot;qsq&quot;</span>,<span class="string">&quot;19&quot;</span>,<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;qzy&quot;</span>,<span class="string">&quot;18&quot;</span>,<span class="string">&quot;henan&quot;</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;003&quot;</span>,<span class="string">&quot;wsq&quot;</span>,<span class="string">&quot;17&quot;</span>,<span class="string">&quot;guangdong&quot;</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;004&quot;</span>,<span class="string">&quot;ly&quot;</span>,<span class="string">&quot;20&quot;</span>,<span class="string">&quot;shandong&quot;</span>);</span><br><span class="line"></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line">        array.add(s4);</span><br><span class="line"></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Student s :array)&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getNumber()).append(<span class="string">&quot;,&quot;</span>).append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getAge()).append(<span class="string">&quot;,&quot;</span>).append(s.getAddress());</span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合到文件案例改进版-1"><a href="#集合到文件案例改进版-1" class="headerlink" title="集合到文件案例改进版"></a>集合到文件案例改进版</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110105757857.png" alt="image-20211110105757857"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxtToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        <span class="comment">//读取数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据用split()进行分割，得到一个字符串数组</span></span><br><span class="line">            String[] strArray = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">//创建学生对象</span></span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.setNumber(strArray[<span class="number">0</span>]);</span><br><span class="line">            s.setName(strArray[<span class="number">1</span>]);</span><br><span class="line">            s.setAge(strArray[<span class="number">2</span>]);</span><br><span class="line">            s.setAddress(strArray[<span class="number">3</span>]);</span><br><span class="line">            array.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        <span class="keyword">for</span> (Student s : array)&#123;</span><br><span class="line">            System.out.println(s.getNumber()+<span class="string">&quot;,&quot;</span>+s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge()+<span class="string">&quot;,&quot;</span>+s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110111202482.png" alt="image-20211110111202482"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//输出流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//创建Treeset集合,通过比较器进行排序</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//s1是新输入的数据，与集合里面已有的数据进行比较和排序</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> num = s2.sum() - s1.sum();</span><br><span class="line">                <span class="keyword">int</span> num1 = num == <span class="number">0</span> ? s2.getChinese() - s1.getChinese() : num;</span><br><span class="line">                <span class="keyword">int</span> num2 = num1 == <span class="number">0</span> ? s2.getMath() - s1.getMath() : num1;</span><br><span class="line">                <span class="keyword">int</span> num3 = num2 == <span class="number">0</span> ? s2.getEnglish() - s1.getEnglish() : num2;</span><br><span class="line">                <span class="keyword">int</span> num4 = num3 == <span class="number">0</span> ? s2.getName().compareTo(s1.getName()) : num3;</span><br><span class="line">                <span class="keyword">return</span> num4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//键盘录入学生数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个学生的信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;姓名:&quot;</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;语文成绩:&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> Chinese = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;数学成绩:&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> math = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;英语成绩:&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> english = sc.nextInt();</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setChinese(Chinese);</span><br><span class="line">            s.setMath(math);</span><br><span class="line">            s.setEnglish(english);</span><br><span class="line">            ts.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Student s : ts)&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getChinese()).append(<span class="string">&quot;,&quot;</span>).append(s.getMath()).append(<span class="string">&quot;,&quot;</span>).append(s.getEnglish());</span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制单级文件夹"><a href="#复制单级文件夹" class="headerlink" title="复制单级文件夹"></a>复制单级文件夹</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110121115138.png" alt="image-20211110121115138"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFoldeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源目录</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\myTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录的名称</span></span><br><span class="line">        String f1Name = f1.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地目录File对象，路径名是模块名+myTest组成</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;myCharStream&quot;</span>,f1Name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断目的地目录对应的File是否存在，如果不存在，就创建</span></span><br><span class="line">        <span class="keyword">if</span>(!f2.exists())&#123;</span><br><span class="line">            <span class="comment">//单级用mkdir 多级用mkdirs</span></span><br><span class="line">            f2.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录下所有文件的File数组</span></span><br><span class="line">        File[] listfiles = f1.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历File数组，得到每一个File对象，该File对象，其实就是数据源文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file:listfiles)&#123;</span><br><span class="line">            <span class="comment">//数据源文件:E:\\myTest\\mn.jpg</span></span><br><span class="line">            <span class="comment">//获取数据源文件File对象的名称(mn.jpg)</span></span><br><span class="line">            String filename = file.getName();</span><br><span class="line">            <span class="comment">//创建目的地文件File对象，路径名是目的地目录+mn.jpg组成(myCharStream\\myTest\\mn.jpg)</span></span><br><span class="line">            File f3 = <span class="keyword">new</span> File(f2,filename);</span><br><span class="line">            <span class="comment">//复制文件</span></span><br><span class="line">            copyFile(file,f3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File file, File f3)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(f3));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i = bis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211110225154117.png" alt="image-20211110225154117"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建数据源File对象，路径是E:\\myTest</span></span><br><span class="line"><span class="comment">    创建目的地File对象，路径是F:</span></span><br><span class="line"><span class="comment">    写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</span></span><br><span class="line"><span class="comment">    判断数据源File是否是目录</span></span><br><span class="line"><span class="comment">    是:</span></span><br><span class="line"><span class="comment">    A:在目的地下创建和数据源File名称一样的目录</span></span><br><span class="line"><span class="comment">    B:获取数据源File下所有文件或者目录的File数组</span></span><br><span class="line"><span class="comment">    C:遍历该File数组，得到每一个File对象</span></span><br><span class="line"><span class="comment">    D:把该File作为数据源File对象，递归调用复制文件夹的方法</span></span><br><span class="line"><span class="comment">    不是:说明是文件，直接复制，用字节流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFoldersDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        创建数据源File对象，路径是E:\\myTest</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\myTest&quot;</span>);</span><br><span class="line"><span class="comment">//        创建目的地File对象，路径是F:</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;F:&quot;</span>);</span><br><span class="line"><span class="comment">//        写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</span></span><br><span class="line">        copyFolder(f1,f2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFolder</span><span class="params">(File f1, File f2)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        判断数据源File是否是目录</span></span><br><span class="line">        <span class="keyword">if</span>(f1.isDirectory())&#123;</span><br><span class="line"><span class="comment">//            在目的地下创建和数据源File名称一样的目录</span></span><br><span class="line">            String f1Name = f1.getName();</span><br><span class="line">            File f3 = <span class="keyword">new</span> File(f2,f1Name);</span><br><span class="line">            <span class="keyword">if</span> (!f3.exists())&#123;</span><br><span class="line">                f3.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            获取数据源File下所有文件或者目录的File数组</span></span><br><span class="line">            File[] listFiles = f1.listFiles();</span><br><span class="line"><span class="comment">//            遍历该File数组，得到每一个File对象</span></span><br><span class="line">            <span class="keyword">for</span> (File file :listFiles)&#123;</span><br><span class="line">                <span class="comment">//把该File作为数据源File对象，递归调用复制文件夹的方法</span></span><br><span class="line">                copyFolder(file,f3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            File newFile = <span class="keyword">new</span> File(f2,f1.getName());</span><br><span class="line">            copyFile(f1,newFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File f1, File f2)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节缓冲流复制文件</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(f1));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(f2));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i=bis.read(bys))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,i);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流复制文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制文件异常处理"><a href="#复制文件异常处理" class="headerlink" title="复制文件异常处理"></a>复制文件异常处理</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111171601091.png" alt="image-20211111171601091"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//异常处理的几种方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通方法 抛出异常</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> i ;</span><br><span class="line">            <span class="keyword">while</span> ((i=br.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                bw.write(chs,<span class="number">0</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">            bw.flush();</span><br><span class="line">            bw.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//标准方法 try catch finally</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                 br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">                 bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> i;</span><br><span class="line">                <span class="keyword">while</span> ((i = br.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    bw.write(chs, <span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bw!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bw.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (br!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        br.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK7改进的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">             BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span> ((i = br.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bw.write(chs, <span class="number">0</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//JDK9改进的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line">            <span class="keyword">try</span> (br;bw)&#123;</span><br><span class="line">                <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> i ;</span><br><span class="line">                <span class="keyword">while</span> ((i=br.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bw.write(chs,<span class="number">0</span>,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h1><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111200738916.png" alt="image-20211111200738916"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInDemo</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//标准输入流</span></span><br><span class="line">    <span class="comment">//        InputStream is = System.in;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        int by ;</span></span><br><span class="line">    <span class="comment">//        while((by=is.read())!=-1)&#123;</span></span><br><span class="line">    <span class="comment">//            System.out.print((char)by);</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//字节输入流转字符输入流</span></span><br><span class="line">    <span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line">    <span class="comment">//        //字符流转为字符缓冲流</span></span><br><span class="line">    <span class="comment">//        BufferedReader br =new BufferedReader(isr);</span></span><br><span class="line">            <span class="comment">//改进一下</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//都字符串</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">            String line = br.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的字符串是：&quot;</span>+line);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;输入一个整数：&quot;</span>);</span><br><span class="line">            String s = br.readLine();</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(s);</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的整数是：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111200711895.png" alt="image-20211111200711895"></p>
<h2 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111201424983.png" alt="image-20211111201424983"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    PrintStream pr = <span class="keyword">new</span> PrintStream(<span class="string">&quot;myOtherStream\\pr.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//用继承父类的的方法写数据会转码</span></span><br><span class="line">    pr.write(<span class="number">97</span>);</span><br><span class="line">    <span class="comment">//用自己特有的方法写数据会照原样输出</span></span><br><span class="line">    pr.println(<span class="number">97</span>);</span><br><span class="line">    pr.println(<span class="number">98</span>);</span><br><span class="line">    pr.flush();</span><br><span class="line">    pr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111202201377.png" alt="image-20211111202201377"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWriterDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        PrintWriter pw = new PrintWriter(&quot;myOtherStream\\pw.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        pw.println(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\pw.txt&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line">        pw.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        pw.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符打印流复制文件"><a href="#字符打印流复制文件" class="headerlink" title="字符打印流复制文件"></a>字符打印流复制文件</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111204229268.png" alt="image-20211111204229268"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyPrintDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据数据源创建字符输入流对象</span></span><br><span class="line"><span class="comment">    根据目的地创建字符输出流对象</span></span><br><span class="line"><span class="comment">    读写数据，复制文件</span></span><br><span class="line"><span class="comment">    释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\myOtherStream.iml&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\copy.iml&quot;</span>));</span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        String s;</span><br><span class="line">         <span class="keyword">while</span> ((s=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">             pw.println(s);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">         pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象序列化流"><a href="#对象序列化流" class="headerlink" title="对象序列化流"></a>对象序列化流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111210924460.png" alt="image-20211111210924460"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111211750536.png" alt="image-20211111211750536"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectOutputStream (OutputStream out):创建一个写入指定的outputStream的ObjectOutputStream</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writeObject (object obj):将指定的对象写入objectOutputStream</span></span><br><span class="line">        oos.writeObject(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象反序列化流"><a href="#对象反序列化流" class="headerlink" title="对象反序列化流"></a>对象反序列化流</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111213548849.png" alt="image-20211111213548849"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//构造方法:</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object readObject ():从objectInputStream读取一个对象</span></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下转型</span></span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象序列化流异常解决"><a href="#对象序列化流异常解决" class="headerlink" title="对象序列化流异常解决"></a>对象序列化流异常解决</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111215348210.png" alt="image-20211111215348062"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用对象序列化流序列化了一个对象后，假如我们修改了对象所属的类文件，读取数据会不会出问题呢?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果出问题了，如何解决呢?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果一个对象中的某个成员变量的值不想被序列化，又该如何实现呢?</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        write();</span><br><span class="line">        read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectOutputStream (OutputStream out):创建一个写入指定的outputStream的ObjectOutputStream</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writeObject (object obj):将指定的对象写入objectOutputStream</span></span><br><span class="line">        oos.writeObject(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//构造方法:</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object readObject ():从objectInputStream读取一个对象</span></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下转型</span></span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111220415595.png" alt="image-20211111220415595"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//储存元素</span></span><br><span class="line">        prop.put(<span class="string">&quot;001&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;003&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Object&gt; keyset = prop.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object key :keyset)&#123;</span><br><span class="line">            Object value = prop.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;,&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Properties特有方法"><a href="#Properties特有方法" class="headerlink" title="Properties特有方法"></a>Properties特有方法</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111220436609.png" alt="image-20211111220436609"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//储存元素</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;001&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;003&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="comment">//根据健获取值</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty(&quot;001&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;String&gt; keyset = prop.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key :keyset)&#123;</span><br><span class="line">            String value = prop.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot;,&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Properties与IO流结合的方法"><a href="#Properties与IO流结合的方法" class="headerlink" title="Properties与IO流结合的方法"></a>Properties与IO流结合的方法</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111221606961.png" alt="image-20211111221606961"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//储存</span></span><br><span class="line">        myStore();</span><br><span class="line">        <span class="comment">//读取加载</span></span><br><span class="line">        myLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">&quot;001&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;003&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\prop.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        fw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\prop.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        prop.load(fr);</span><br><span class="line"></span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h2><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdownsushe/image-20211111224241387.png" alt="image-20211111224241387"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//储存</span></span><br><span class="line">        myStore();</span><br><span class="line">        <span class="comment">//读取加载</span></span><br><span class="line">        myLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">&quot;count&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\Game.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        fw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\prop.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        prop.load(fr);</span><br><span class="line"></span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guessnumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> number = r.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你要猜的数字：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> gm = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(gm&gt;number)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你猜的数字&quot;</span>+gm+<span class="string">&quot;大了&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(gm&lt;number)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你猜的数字&quot;</span>+gm+<span class="string">&quot;小了&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猜中了&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\Game.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过pr集合获取玩游戏的次数</span></span><br><span class="line">        String count = prop.getProperty(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> number = Integer.parseInt(count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;游戏试玩已结束，想玩请充值&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Guessnumber.Start();</span><br><span class="line">            number++;</span><br><span class="line">            prop.setProperty(<span class="string">&quot;count&quot;</span>,String.valueOf(number));</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\Game.txt&quot;</span>);</span><br><span class="line">            prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图床]]></title>
      <url>/2021/11/07/%E5%9B%BE%E5%BA%8A/</url>
      <content type="html"><![CDATA[<h1 id="picgo下载"><a href="#picgo下载" class="headerlink" title="picgo下载"></a>picgo下载</h1><p>开源下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107191900219.png" alt="image-20211107191900219"></p>
<p>下载X64.exe版本</p>
<span id="more"></span>

<p>然后一键安装打开</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107192136581.png" alt="image-20211107192136581"></p>
<h1 id="设置云端图床"><a href="#设置云端图床" class="headerlink" title="设置云端图床"></a>设置云端图床</h1><p>利用阿里云 便宜且稳定</p>
<p>1、购买链接一年只用9块钱：<a href="https://common-buy.aliyun.com/?spm=5176.7933691.1309819..74a72a66y3tNSV&amp;commodityCode=ossbag&amp;request=%7B%22region%22:%22china-common%22%7D#/buy">https://common-buy.aliyun.com/?spm=5176.7933691.1309819..74a72a66y3tNSV&amp;commodityCode=ossbag&amp;request=%7B%22region%22%3A%22china-common%22%7D#/buy</a></p>
<p>2、进入控制台，激活对象储存，创建bucket</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107192754949.png" alt="image-20211107192754949"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107192916122.png" alt="image-20211107192916122"></p>
<p>3、创建文件目录</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107193135989.png" alt="image-20211107193135989"></p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107193327863.png" alt="image-20211107193327863"></p>
<p>4、设置AccessKey</p>
<p>鼠标放在头像上选择AccessKey管理，选择子用户AccessKey管理。创建用户：</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107193702450.png" alt="image-20211107193702450"></p>
<p>创建成功后可以看到访问keyId和keySecret，复制下来！</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107195455090.png" alt="image-20211107195455090"></p>
<ol start="5">
<li>打开PicGo 选择阿里云OSS，填入相关内容：</li>
</ol>
<ul>
<li>keyid和KeySecret选择步骤四复制的内容</li>
<li>存储空间名选择步骤二自己创建的Bucket名称</li>
<li>存储区域，步骤二如果选的北京，就和我的一样</li>
<li>存储路径选择步骤三自己新建的文件目录</li>
<li>点击确认，设置为默认图床</li>
</ul>
<ol start="6">
<li>点击上传区，上传一张图片测试一下，如果上传成功，就连接成功了</li>
</ol>
<h1 id="Typora-配置PicGo"><a href="#Typora-配置PicGo" class="headerlink" title="Typora 配置PicGo"></a>Typora 配置PicGo</h1><p>最后一步了，我们打开Typora，找到图片设置，设置如下，PicGo的路径选择自己安装的路径，然后验证图片上传是否成功</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107200330924.png" alt="image-20211107200330924"></p>
<h1 id="到这里就完成了Typora-与PicGo-的结合"><a href="#到这里就完成了Typora-与PicGo-的结合" class="headerlink" title="到这里就完成了Typora 与PicGo 的结合"></a>到这里就完成了Typora 与PicGo 的结合</h1><p>插入图片后的地址就变成阿里云服务器地址了</p>
<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107201433627.png" alt="image-20211107201433627"></p>
]]></content>
      
        
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习之Collections]]></title>
      <url>/2021/11/07/java%E5%AD%A6%E4%B9%A0%E4%B9%8BCollections/</url>
      <content type="html"><![CDATA[<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107163303049.png" alt="image-20211107163303049"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        list.add(<span class="number">60</span>);</span><br><span class="line"><span class="comment">//        Collections.sort(list);升序</span></span><br><span class="line"><span class="comment">//        Collections.reverse(list);倒转</span></span><br><span class="line"><span class="comment">//        Collections.shuffle(list);随机</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107163341023.png" alt="image-20211107163341023"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;zhangmanyu&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;liuyan&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;shuqi&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line">        array.add(s4);</span><br><span class="line">        Collections.sort(array, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> num = s1.getAge()-s2.getAge();</span><br><span class="line">                <span class="keyword">int</span> num1 = num==<span class="number">0</span>?s1.getName().compareTo(s2.getName()):num;</span><br><span class="line">                <span class="keyword">return</span> num1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Student s  :array)&#123;</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211107163408721.png" alt="image-20211107163408721"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokeDomo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义牌盒</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//往牌盒放牌</span></span><br><span class="line">        <span class="comment">//定义花色组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♠&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♦&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//定义点数</span></span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;A&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String color:colors)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String number:numbers)&#123;</span><br><span class="line">                array.add(color+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array.add(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;大王&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌，把牌打乱</span></span><br><span class="line">        Collections.shuffle(array);</span><br><span class="line"><span class="comment">//        System.out.println(array);</span></span><br><span class="line">        <span class="comment">//发牌，遍历集合</span></span><br><span class="line">        <span class="comment">//定义三个人和底牌的牌盒</span></span><br><span class="line">        ArrayList&lt;String&gt; lqxarray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; lyarray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; fqyarray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; lastarray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//给每个人的牌盒发牌</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;array.size()-<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    lqxarray.add(array.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                    lyarray.add(array.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    fqyarray.add(array.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            lastarray.add(array.get(i));&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(lqxarray);</span><br><span class="line">        System.out.println(lyarray);</span><br><span class="line">        System.out.println(fqyarray);</span><br><span class="line">        System.out.println(lastarray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://1499842252.oss-cn-beijing.aliyuncs.com/image/markdown/image-20211108100355184.png" alt="image-20211108100355184"> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer,String&gt; hm = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//      建立牌盒</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♠&quot;</span>,<span class="string">&quot;♥&quot;</span>,<span class="string">&quot;♣&quot;</span>,<span class="string">&quot;♦&quot;</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;A&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String number : numbers)&#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors)&#123;</span><br><span class="line">                hm.put(index,color+number);</span><br><span class="line">                array.add(index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hm.put(index,<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        array.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        hm.put(index,<span class="string">&quot;大王&quot;</span>);</span><br><span class="line">        array.add(index);</span><br><span class="line">        index++;</span><br><span class="line"><span class="comment">//        System.out.println(array);</span></span><br><span class="line"><span class="comment">//        System.out.println(hm);</span></span><br><span class="line">        <span class="comment">//洗牌</span></span><br><span class="line">        Collections.shuffle(array);</span><br><span class="line"><span class="comment">//        System.out.println(array);</span></span><br><span class="line"><span class="comment">//        System.out.println(hm);</span></span><br><span class="line"><span class="comment">//      发牌</span></span><br><span class="line">        TreeSet&lt;Integer&gt; lqx = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; ly = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; fqy = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; dp = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;array.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x =array.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;= array.size()-<span class="number">3</span>)&#123;</span><br><span class="line">                dp.add(x);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                lqx.add(x);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                ly.add(x);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                fqy.add(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lookPoker(<span class="string">&quot;林青霞&quot;</span>,lqx,hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;柳岩&quot;</span>,ly,hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;风清扬&quot;</span>,fqy,hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;底牌&quot;</span>,dp,hm);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookPoker</span><span class="params">(String name ,TreeSet&lt;Integer&gt; ts,HashMap&lt;Integer,String&gt; hm)</span></span>&#123;</span><br><span class="line">        System.out.print(name+<span class="string">&quot;的牌：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Integer key:ts)&#123;</span><br><span class="line">            String poker = hm.get(key);</span><br><span class="line">            System.out.print(poker+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> Java基础知识学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>/2021/11/06/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><h2 id="学习md语法"><a href="#学习md语法" class="headerlink" title="学习md语法"></a>学习md语法</h2><p>利用md语法在typora写出一篇漂亮的博客</p>
]]></content>
      
        
        <tags>
            
            <tag> 学习日志 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
